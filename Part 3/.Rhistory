evaluate(list(test$team_1, test$team_2), as.numeric(test$win == TRUE), verbose = 0)
plot(history)
results
runs %>%
as_tibble() %>%
arrange(desc(metric_val_accuracy))
library(tidyverse)
library(data.table)
library(keras)
library(tfruns)
library(rsample)
u
runs %>%
as_tibble() %>%
arrange(desc(metric_val_accuracy))
source("~/Personal Projects/LeagueofLegends/Part 3/BothTeamCompsNN.R", echo=TRUE)
source("~/Personal Projects/LeagueofLegends/Part 3/BothTeamCompsNN.R", echo=TRUE)
data.NN
source("~/Personal Projects/LeagueofLegends/Part 3/BothTeamCompsNN.R", echo=TRUE)
# Splitting Data into Training Sets
split <- initial_split(data.NN, prop = 4/5)
train <- training(split)
test <- testing(split)
# Vectorization Layer
num_words <- 160
max_length <- 5
text_vectorization <- layer_text_vectorization(
max_tokens = num_words,
output_sequence_length = max_length
)
text_vectorization %>%
adapt(data.raw$team) # Using data.raw for all teams
input_1 <- layer_input(shape = c(1), dtype = "string")
input_2 <- layer_input(shape = c(1), dtype = "string")
FLAGS <- flags(
flag_numeric("dropout", 0.4),
flag_numeric("unit", 8)
)
embedding_1 <- input_1 %>%
text_vectorization() %>%
text_embedding()
source("~/Personal Projects/LeagueofLegends/Part 3/BothTeamCompsNN.R", echo=TRUE)
results
source("~/Personal Projects/LeagueofLegends/Part 3/BothTeamCompsNN.R", echo=TRUE)
results
predict(model, list("TahmKench Graves Veigar Jihn Lux", "Jayce Viego Kayle Kaisa Nami"))
source("~/.active-rstudio-document", echo=TRUE)
results
summary(model)
source("~/Personal Projects/LeagueofLegends/Part 3/BothTeamCompsNN.R", echo=TRUE)
source("~/.active-rstudio-document", echo=TRUE)
results
source("~/.active-rstudio-document", echo=TRUE)
source("~/.active-rstudio-document", echo=TRUE)
source("~/.active-rstudio-document", echo=TRUE)
source("~/.active-rstudio-document", echo=TRUE)
source("~/.active-rstudio-document", echo=TRUE)
source("~/.active-rstudio-document", echo=TRUE)
results
source("~/.active-rstudio-document", echo=TRUE)
source("~/.active-rstudio-document", echo=TRUE)
source("~/.active-rstudio-document", echo=TRUE)
source("~/.active-rstudio-document", echo=TRUE)
source("~/.active-rstudio-document", echo=TRUE)
source("~/.active-rstudio-document", echo=TRUE)
source("~/.active-rstudio-document", echo=TRUE)
source("~/.active-rstudio-document", echo=TRUE)
source("~/.active-rstudio-document", echo=TRUE)
source("~/.active-rstudio-document", echo=TRUE)
source("~/.active-rstudio-document", echo=TRUE)
source("~/.active-rstudio-document", echo=TRUE)
source("~/.active-rstudio-document", echo=TRUE)
source("~/Personal Projects/LeagueofLegends/Part 3/Model2.R", echo=TRUE)
source("~/Personal Projects/LeagueofLegends/Part 3/Model2.R", echo=TRUE)
source("~/Personal Projects/LeagueofLegends/Part 3/Model2.R", echo=TRUE)
source("~/Personal Projects/LeagueofLegends/Part 3/Model2.R", echo=TRUE)
source("~/Personal Projects/LeagueofLegends/Part 3/Model2.R", echo=TRUE)
source("~/Personal Projects/LeagueofLegends/Part 3/Model2.R", echo=TRUE)
source("~/Personal Projects/LeagueofLegends/Part 3/Model2.R", echo=TRUE)
source("~/Personal Projects/LeagueofLegends/Part 3/Model2.R", echo=TRUE)
gameInfo <- read_csv("../data/matchData.csv")
colnames(gameInfo)
data.NN <- left_join(
data.raw %>%
filter(row_number() %% 2 == 1) %>%
rename(team_1 = team),
data.raw %>%
filter(row_number() %% 2 == 0) %>%
rename(team_2 = team) %>%
select(!win),
by = "match"
)
data.NN
data.NN.tier <- data.NN %>%
left_join(
gameInfo %>%
select(tier, match),
by = "match"
)
data.NN.tier
data.NN <- left_join(
data.raw %>%
filter(row_number() %% 2 == 1) %>%
rename(team_1 = team),
data.raw %>%
filter(row_number() %% 2 == 0) %>%
rename(team_2 = team) %>%
select(!win),
by = "match"
)
data.NN
data.NN.tier <- data.NN %>%
left_join(
gameInfo %>%
distinct(match, tier),
by = "match"
)
data.NN.tier
# Splitting Data into Training Sets
split <- initial_split(data.NN, prop = 4/5)
train <- training(split)
test <- testing(split)
# Vectorization Layer
num_words <- 160
max_length <- 5
text_vectorization <- layer_text_vectorization(
max_tokens = num_words,
output_sequence_length = max_length
)
text_vectorization %>%
adapt(data.raw$team) # Using data.raw for all teams
input_1 <- layer_input(shape = c(1), dtype = "string")
input_2 <- layer_input(shape = c(1), dtype = "string")
FLAGS <- flags(
flag_numeric("dropout", 0.5),
flag_numeric("unit", 16)
)
text_embedding <- layer_embedding(input_dim = num_words + 1, output_dim = FLAGS$unit)
embedding_1 <- input_1 %>%
text_vectorization() %>%
text_embedding() %>%
layer_global_average_pooling_1d() %>%
layer_dense(units = FLAGS$unit, activation = "relu") %>%
layer_dropout(rate = FLAGS$dropout)
embedding_2 <- input_2 %>%
text_vectorization() %>%
text_embedding() %>%
layer_global_average_pooling_1d() %>%
layer_dense(units = FLAGS$unit, activation = "relu") %>%
layer_dropout(rate = FLAGS$dropout)
output <- layer_concatenate(c(embedding_1, embedding_2), axis=-1) %>%
layer_dense(units = 1, activation = "sigmoid")
model <- keras_model(inputs = c(input_1, input_2), output)
model %>%
compile(
optimizer = "Adam",
loss = "binary_crossentropy",
metrics = list("accuracy")
)
summary(model)
history <- model %>%
fit(
list(train$team_1, train$team_2),
as.numeric(train$win == TRUE),
epochs = 15,
batch_size = 100,
validation_split = 0.2,
verbose = 2
)
results <- model %>%
evaluate(list(test$team_1, test$team_2), as.numeric(test$win == TRUE), verbose = 0)
plot(history)
source("~/Personal Projects/LeagueofLegends/Part 3/Model1.R", echo=TRUE)
results
source("~/Personal Projects/LeagueofLegends/Part 3/Model1.R", echo=TRUE)
source("~/Personal Projects/LeagueofLegends/Part 3/Model1.R", echo=TRUE)
source("~/Personal Projects/LeagueofLegends/Part 3/Model1.R", echo=TRUE)
source("~/Personal Projects/LeagueofLegends/Part 3/Model1.R", echo=TRUE)
source("~/Personal Projects/LeagueofLegends/Part 3/Model1.R", echo=TRUE)
source("~/Personal Projects/LeagueofLegends/Part 3/Model1.R", echo=TRUE)
source("~/Personal Projects/LeagueofLegends/Part 3/Model1.R", echo=TRUE)
source("~/Personal Projects/LeagueofLegends/Part 3/Model1.R", echo=TRUE)
source("~/Personal Projects/LeagueofLegends/Part 3/Model1.R", echo=TRUE)
source("~/Personal Projects/LeagueofLegends/Part 3/Model1.R", echo=TRUE)
source("~/Personal Projects/LeagueofLegends/Part 3/Model1.R", echo=TRUE)
source("~/Personal Projects/LeagueofLegends/Part 3/Model1.R", echo=TRUE)
source("~/Personal Projects/LeagueofLegends/Part 3/Model1.R", echo=TRUE)
source("~/Personal Projects/LeagueofLegends/Part 3/Model1.R", echo=TRUE)
source("~/Personal Projects/LeagueofLegends/Part 3/Model1.R", echo=TRUE)
source("~/Personal Projects/LeagueofLegends/Part 3/Model1.R", echo=TRUE)
source("~/Personal Projects/LeagueofLegends/Part 3/Model1.R", echo=TRUE)
source("~/Personal Projects/LeagueofLegends/Part 3/Model1.R", echo=TRUE)
source("~/Personal Projects/LeagueofLegends/Part 3/Model1.R", echo=TRUE)
source("~/Personal Projects/LeagueofLegends/Part 3/Model1.R", echo=TRUE)
source("~/Personal Projects/LeagueofLegends/Part 3/Model1.R", echo=TRUE)
source("~/Personal Projects/LeagueofLegends/Part 3/Model1.R", echo=TRUE)
source("~/Personal Projects/LeagueofLegends/Part 3/Model1.R", echo=TRUE)
source("~/Personal Projects/LeagueofLegends/Part 3/Model1.R", echo=TRUE)
source("~/Personal Projects/LeagueofLegends/Part 3/Model1.R", echo=TRUE)
source("~/Personal Projects/LeagueofLegends/Part 3/Model1.R", echo=TRUE)
source("~/Personal Projects/LeagueofLegends/Part 3/Model1.R", echo=TRUE)
source("~/Personal Projects/LeagueofLegends/Part 3/Model1.R", echo=TRUE)
source("~/Personal Projects/LeagueofLegends/Part 3/Model1.R", echo=TRUE)
source("~/Personal Projects/LeagueofLegends/Part 3/Model1.R", echo=TRUE)
source("~/Personal Projects/LeagueofLegends/Part 3/Model1.R", echo=TRUE)
source("~/Personal Projects/LeagueofLegends/Part 3/Model1.R", echo=TRUE)
source("~/Personal Projects/LeagueofLegends/Part 3/Model1.R", echo=TRUE)
source("~/Personal Projects/LeagueofLegends/Part 3/Model1.R", echo=TRUE)
?adapt
source("~/.active-rstudio-document", echo=TRUE)
source("~/.active-rstudio-document", echo=TRUE)
source("~/Personal Projects/LeagueofLegends/Part 3/Model2.R", echo=TRUE)
source("~/Personal Projects/LeagueofLegends/Part 3/Model2.R", echo=TRUE)
source("~/Personal Projects/LeagueofLegends/Part 3/Model2.R", echo=TRUE)
source("~/Personal Projects/LeagueofLegends/Part 3/Model1.R", echo=TRUE)
source("~/Personal Projects/LeagueofLegends/Part 3/Model2.R", echo=TRUE)
data.NN.tier %>% filter(tier == "DIAMOND")
# Splitting Data into Training Sets
split <- initial_split(data.NN.tier, prop = 4/5)
train <- training(split)
test <- testing(split)
test$tier %>% text_vectorization_tier()
get_vocabulary(text_vectorization_tier())
get_vocabulary(text_vectorization_tier
)
text_vectorization_tier <- layer_text_vectorization(
max_tokens = 8,
output_sequence_length = 1
)
text_vectorization_tier %>%
adapt(data.NN.tier$tier)
get_vocabulary(text_vectorization_tier)
train$tier %>% text_vectorization_tier()
train$team_1 %>% text_vectorization()
source("~/Personal Projects/LeagueofLegends/Part 3/Model1.R", echo=TRUE)
source("~/Personal Projects/LeagueofLegends/Part 3/Model1.R", echo=TRUE)
# Splitting Data into Training Sets
split <- initial_split(data.NN.tier, prop = 4/5)
train <- training(split)
test <- testing(split)
train$teir
train$tier %>% text_vectorization_tier() %>% layer_embedding()
train$tier %>% text_vectorization_tier() %>% text_embedding()
train$team_1 %>% text_vectorization() %>% text_embedding()
train$tier %>% text_vectorization_tier() %>% text_embedding()
source("~/Personal Projects/LeagueofLegends/Part 3/Model1.R", echo=TRUE)
summary(model())
summary(model
)
?layer_concatenate
output <- layer_concatenate(c(embedding_1, embedding_2), axis=1) %>%
layer_global_average_pooling_1d() %>%
layer_dense(units = 3*FLAGS$unit, activation = "tanh") %>%
layer_dropout(rate = FLAGS$dropout) %>%
layer_dense(units = 2*FLAGS$unit, activation = "gelu") %>%
layer_dropout(rate = FLAGS$dropout) %>%
layer_dense(units = FLAGS$unit, activation = "relu") %>%
layer_dropout(rate = FLAGS$dropout) %>%
layer_dense(units = 1, activation = "sigmoid")
summary(model)
output <- layer_concatenate(c(embedding_1, embedding_2), axis=2) %>%
layer_global_average_pooling_1d() %>%
layer_dense(units = 3*FLAGS$unit, activation = "tanh") %>%
layer_dropout(rate = FLAGS$dropout) %>%
layer_dense(units = 2*FLAGS$unit, activation = "gelu") %>%
layer_dropout(rate = FLAGS$dropout) %>%
layer_dense(units = FLAGS$unit, activation = "relu") %>%
layer_dropout(rate = FLAGS$dropout) %>%
layer_dense(units = 1, activation = "sigmoid")
model <- keras_model(inputs = c(input_1, input_2), output)
summary(model)
source("~/Personal Projects/LeagueofLegends/Part 3/Model1.R", echo=TRUE)
source("~/Personal Projects/LeagueofLegends/Part 3/Model1.R", echo=TRUE)
source("~/Personal Projects/LeagueofLegends/Part 3/Model3.R", echo=TRUE)
source("~/Personal Projects/LeagueofLegends/Part 3/Model3.R", echo=TRUE)
source("~/Personal Projects/LeagueofLegends/Part 3/Model3.R", echo=TRUE)
source("~/Personal Projects/LeagueofLegends/Part 3/Model3.R", echo=TRUE)
source("~/Personal Projects/LeagueofLegends/Part 3/Model3.R", echo=TRUE)
source("~/Personal Projects/LeagueofLegends/Part 3/Model1.R", echo=TRUE)
results
results1
results1
results1
library(tidyverse)
library(data.table)
library(keras)
library(tfruns)
library(rsample)
keras::k_flatten()
?keras::k_flatten()
?adapt
source("~/Personal Projects/LeagueofLegends/Part 3/Model1_1.R", echo=TRUE)
source("~/Personal Projects/LeagueofLegends/Part 3/Model1_1.R", echo=TRUE)
source("~/Personal Projects/LeagueofLegends/Part 3/Model1_1.R", echo=TRUE)
data.NN.tier
data.NN.tier %>% filter(tier == "DIAMOND")
source("~/Personal Projects/LeagueofLegends/Part 3/Model1_1.R", echo=TRUE)
results1
source("~/Personal Projects/LeagueofLegends/Part 3/Model1_1.R", echo=TRUE)
?initial_split
train
test
source("~/Personal Projects/LeagueofLegends/Part 3/Model1_1.R", echo=TRUE)
source("~/Personal Projects/LeagueofLegends/Part 3/Model1_1.R", echo=TRUE)
results1
source("~/Personal Projects/LeagueofLegends/Part 3/Model1_1.R", echo=TRUE)
source("~/Personal Projects/LeagueofLegends/Part 3/Model1_1.R", echo=TRUE)
# Splitting Data into Training Sets
split <- initial_split(data.NN.tier, prop = 4/5)
train <- training(split)
test <- testing(split)
# Vectorization Layer
num_words <- 160
max_length <- 5
text_vectorization <- layer_text_vectorization(
max_tokens = num_words,
output_sequence_length = max_length
)
text_vectorization_tier <- layer_text_vectorization(
max_tokens = 8,
output_sequence_length = 1
)
text_vectorization %>%
adapt(data.raw$team) # Using data.raw for all teams
text_vectorization_tier %>%
adapt(data.NN.tier$tier)
input_1 <- layer_input(shape = c(1), dtype = "string")
input_2 <- layer_input(shape = c(1), dtype = "string")
input_3 <- layer_input(shape = c(1), dtype = "string")
FLAGS <- flags(
flag_numeric("dropout", 0.5),
flag_numeric("unit", 8)
)
text_embedding <- layer_embedding(input_dim = num_words + 1, output_dim = 5)
embedding_1 <- input_1 %>%
text_vectorization() %>%
text_embedding()
embedding_2 <- input_2 %>%
text_vectorization() %>%
text_embedding()
embedding_3 <- input_3 %>%
text_vectorization_tier() %>%
text_embedding()
output <- layer_concatenate(c(embedding_1, embedding_2, embedding_3), axis=2) %>% # Need to figure out how to concatenate this properly
layer_global_average_pooling_1d() %>%
layer_dense(units = FLAGS$unit, activation = "relu") %>%
layer_dropout(rate = FLAGS$dropout) %>%
layer_dense(units = 1, activation = "sigmoid")
output <- layer_concatenate(c(embedding_1, embedding_2, embedding_3), axis=1) %>% # Need to figure out how to concatenate this properly
layer_global_average_pooling_1d() %>%
layer_dense(units = FLAGS$unit, activation = "relu") %>%
layer_dropout(rate = FLAGS$dropout) %>%
layer_dense(units = 1, activation = "sigmoid")
model <- keras_model(inputs = c(input_1, input_2, input_3), output)
summary(model)
model %>%
compile(
optimizer = "Adam",
loss = "binary_crossentropy",
metrics = list("accuracy")
)
history <- model %>%
fit(
list(train$team_1, train$team_2, train$tier),
as.numeric(train$win == TRUE),
epochs = 25,
batch_size = 1000,
validation_split = 0.2,
verbose = 2
)
library(tidyverse)
library(data.table)
library(keras)
library(tfruns)
library(rsample)
library(e1071)
data.SVM.temp <- gameInfo %>%
select(match, tier, championName, win) %>%
group_by(match) %>%
mutate(
team = rleid(win),
team = case_when(
team == 1  ~  "Blue",
team == 2  ~  "Red",
),
championName = str_c(championName, team, sep = "_"),
value = 1
) %>%
ungroup()
data.SVM <- data.SVM.temp %>%
distinct(match, tier, win) %>%
left_join(
data.SVM.temp %>%
filter(team == "Blue") %>%
select(match, championName, team, value) %>%
pivot_wider(
names_from = championName,
values_from = value
) %>%
select(!team) %>%
replace(is.na(.), 0),
by = "match"
) %>%
left_join(
data.SVM.temp %>%
filter(team == "Red") %>%
select(match, championName, team, value) %>%
pivot_wider(
names_from = championName,
values_from = value
) %>%
select(!team) %>%
replace(is.na(.), 0),
by = "match"
) %>%
rename(blue_win = win)
data.SVM
data.SVM.temp <- gameInfo %>%
select(match, tier, championName, win) %>%
group_by(match) %>%
mutate(
team = rleid(win),
team = case_when(
team == 1  ~  "Blue",
team == 2  ~  "Red",
),
championName = str_c(championName, team, sep = "_"),
value = 1
) %>%
ungroup()
data.SVM <- data.SVM.temp %>%
distinct(match, tier, .keep_all = true) %>%
select(match, tier, win) %>%
left_join(
data.SVM.temp %>%
filter(team == "Blue") %>%
select(match, championName, team, value) %>%
pivot_wider(
names_from = championName,
values_from = value
) %>%
select(!team) %>%
replace(is.na(.), 0),
by = "match"
) %>%
left_join(
data.SVM.temp %>%
filter(team == "Red") %>%
select(match, championName, team, value) %>%
pivot_wider(
names_from = championName,
values_from = value
) %>%
select(!team) %>%
replace(is.na(.), 0),
by = "match"
) %>%
rename(blue_win = win)
data.SVM <- data.SVM.temp %>%
distinct(match, tier, .keep_all = TRUE) %>%
select(match, tier, win) %>%
left_join(
data.SVM.temp %>%
filter(team == "Blue") %>%
select(match, championName, team, value) %>%
pivot_wider(
names_from = championName,
values_from = value
) %>%
select(!team) %>%
replace(is.na(.), 0),
by = "match"
) %>%
left_join(
data.SVM.temp %>%
filter(team == "Red") %>%
select(match, championName, team, value) %>%
pivot_wider(
names_from = championName,
values_from = value
) %>%
select(!team) %>%
replace(is.na(.), 0),
by = "match"
) %>%
rename(blue_win = win)
data.SVM
SVM.split <- initial_split(data.SVM %>% select(!match) %>% select(!tier), prop = 4/5)
SVM.train <- training(SVM.split)
SVM.test <- testing(SVM.split)
SVM_model <- svm(
x = SVM.train %>% select(!blue_win),
y = as.numeric(SVM.train$blue_win),
gamma = 1/2
)
SVM_model
SVM.train.predict <- predict(SVM.train, SVM.train %>% select(!blue_win))
SVM_predict <- predict(SVM_model,newdata = SVM.test)
SVM_predict <- predict(SVM_model, SVM.test)
SVM_model
SVM.test
SVM_predict <- predict(SVM_model, SVM.test %>% select(!blue_win))
head(SVM_predict)
SVM_predict
library(tidyverse)
library(data.table)
library(keras)
library(tfruns)
library(rsample)
library(e1071)
library(tidyverse)
write_csv(data.SVM, "../data/teamNamesSparse.csv")
