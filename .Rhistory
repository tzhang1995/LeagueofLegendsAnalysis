}
GET_WR_PLOTS <- function(table){
role = table$individualPosition[[1]]
models <- list()
preds <- list()
goldRange <- data.frame(goldEarned = seq(0, .75, length.out = 75))
champions <- table %>%
distinct(championName)
plot <- plot_ly()
for(i in 1:nrow(champions)){
models[[i]] <- table %>%
filter(championName == champions$championName[[i]]) %>%
glm(formula = win~goldEarned, family = "binomial", data = .)
preds[[i]] <- predict.glm(models[[i]], type = "response", new.data = goldRange)
plot <- plot %>%
add_trace(
x = goldRange$goldEarned,
y = preds[[i]],
type = "scatter",
mode = "lines+markers",
name = champions$championName[[i]]
)
}
plot <- plot %>%
layout(
xaxis = list(title = "Gold Percent"),
yaxis = list(title ="Predicted Probability of Winning"),
title = paste0("Top and Bottom 3 Winrate Champions (", role, ")")
)
return(plot)
}
winrate$tables$WR_highlow <- data.temp$WR_highlow.temp %>%
mutate(
plot = map(
table,
.f = GET_WR_PLOTS
)
)
winrate$tables$WR_highlow$plot[1]
data.frame(goldEarned = seq(0, .75, length.out = 75))
GET_WR_PLOTS <- function(table){
role = table$individualPosition[[1]]
models <- list()
preds <- list()
goldRange <- data.frame(goldEarned = seq(0, .75, length.out = 75))
champions <- table %>%
distinct(championName)
plot <- plot_ly()
for(i in 1:nrow(champions)){
models[[i]] <- table %>%
filter(championName == champions$championName[[i]]) %>%
glm(formula = win~goldEarned, family = "binomial", data = .)
preds[[i]] <- predict.glm(models[[i]], type = "response", newdata = goldRange)
plot <- plot %>%
add_trace(
x = goldRange$goldEarned,
y = preds[[i]],
type = "scatter",
mode = "lines+markers",
name = champions$championName[[i]]
)
}
plot <- plot %>%
layout(
xaxis = list(title = "Gold Percent"),
yaxis = list(title ="Predicted Probability of Winning"),
title = paste0("Top and Bottom 3 Winrate Champions (", role, ")")
)
return(plot)
}
winrate$tables$WR_highlow <- data.temp$WR_highlow.temp %>%
mutate(
plot = map(
table,
.f = GET_WR_PLOTS
)
)
winrate$tables$WR_highlow$plot[[1]]
plot <- plot %>%
add_trace(
x = goldRange$goldEarned,
y = preds[[i]],
type = "scatter",
mode = "lines",
name = champions$championName[[i]]
)
GET_WR_PLOTS <- function(table){
role = table$individualPosition[[1]]
models <- list()
preds <- list()
goldRange <- data.frame(goldEarned = seq(0, .75, length.out = 75))
champions <- table %>%
distinct(championName)
plot <- plot_ly()
for(i in 1:nrow(champions)){
models[[i]] <- table %>%
filter(championName == champions$championName[[i]]) %>%
glm(formula = win~goldEarned, family = "binomial", data = .)
preds[[i]] <- predict.glm(models[[i]], type = "response", newdata = goldRange)
plot <- plot %>%
add_trace(
x = goldRange$goldEarned,
y = preds[[i]],
type = "scatter",
mode = "lines",
name = champions$championName[[i]]
)
}
plot <- plot %>%
layout(
xaxis = list(title = "Gold Percent"),
yaxis = list(title ="Predicted Probability of Winning"),
title = paste0("Top and Bottom 3 Winrate Champions (", role, ")")
)
return(plot)
}
winrate$tables$WR_highlow <- data.temp$WR_highlow.temp %>%
mutate(
plot = map(
table,
.f = GET_WR_PLOTS
)
)
winrate$tables$WR_highlow$plot[[1]]
winrate$tables$WR_highlow$plot[[2]]
winrate$tables$WR_highlow$plot[[4]]
winrate$tables$WR_highlow$plot[[3]]
winrate$tables$WR_highlow$table[[1]]
winrate$tables$WR_highlow$table[[1]] %>% view()
winrate$tables$WR_highlow$table[[1]] %>% count(individualPosition)
winrate$tables$WR_highlow$table[[1]] %>% count(individualPosition) %>% arrange()
winrate$tables$WR_highlow$table[[1]] %>% filter(championName == "Brand") %>% count(individualPosition)
GET_WR_DATA <- function(ROLE, TABLE1 = data.temp$goldPercent, TABLE2 = winrate$tables$highlow){
glm_data <- TABLE1 %>%
filter(
championName %in% (TABLE2 %>%
filter(individualPosition == ROLE) %>%
{.$championName})
) %>%
return()
}
GET_WR_MODEL <- function(table){
glm(win ~ championName*goldEarned, data = table, family = "binomial") %>%
return()
}
GET_WR_PLOTS <- function(ROLE, table){
models <- list()
preds <- list()
goldRange <- data.frame(goldEarned = seq(0, .75, length.out = 75))
champions <- table %>%
distinct(championName)
plot <- plot_ly()
for(i in 1:nrow(champions)){
models[[i]] <- table %>%
filter(championName == champions$championName[[i]]) %>%
filter(individualPosition == ROLE) %>%
glm(formula = win~goldEarned, family = "binomial", data = .)
preds[[i]] <- predict.glm(models[[i]], type = "response", newdata = goldRange)
plot <- plot %>%
add_trace(
x = goldRange$goldEarned,
y = preds[[i]],
type = "scatter",
mode = "lines",
name = champions$championName[[i]]
)
}
plot <- plot %>%
layout(
xaxis = list(title = "Gold Percent"),
yaxis = list(title ="Predicted Probability of Winning"),
title = paste0("Top and Bottom 3 Winrate Champions (", ROLE, ")")
)
return(plot)
}
plot <- plot %>%
layout(
xaxis = list(title = "Gold Percent"),
yaxis = list(title ="Predicted Probability of Winning"),
title = paste0("Top and Bottom 3 Winrate Champions (", str_to_title(ROLE), ")")
)
GET_WR_DATA <- function(ROLE, TABLE1 = data.temp$goldPercent, TABLE2 = winrate$tables$highlow){
glm_data <- TABLE1 %>%
filter(
championName %in% (TABLE2 %>%
filter(individualPosition == ROLE) %>%
{.$championName})
) %>%
return()
}
GET_WR_MODEL <- function(table){
glm(win ~ championName*goldEarned, data = table, family = "binomial") %>%
return()
}
GET_WR_PLOTS <- function(ROLE, table){
models <- list()
preds <- list()
goldRange <- data.frame(goldEarned = seq(0, .75, length.out = 75))
champions <- table %>%
distinct(championName)
plot <- plot_ly()
for(i in 1:nrow(champions)){
models[[i]] <- table %>%
filter(championName == champions$championName[[i]]) %>%
filter(individualPosition == ROLE) %>%
glm(formula = win~goldEarned, family = "binomial", data = .)
preds[[i]] <- predict.glm(models[[i]], type = "response", newdata = goldRange)
plot <- plot %>%
add_trace(
x = goldRange$goldEarned,
y = preds[[i]],
type = "scatter",
mode = "lines",
name = champions$championName[[i]]
)
}
plot <- plot %>%
layout(
xaxis = list(title = "Gold Percent"),
yaxis = list(title ="Predicted Probability of Winning"),
title = paste0("Top and Bottom 3 Winrate Champions (", str_to_title(ROLE), ")")
)
return(plot)
}
winrate$tables$WR_highlow <- data.temp$WR_highlow.temp %>%
mutate(
plot = map2(
ROLE,
table,
.f = GET_WR_PLOTS
)
)
winrate$tables$WR_highlow$plot[[1]]
winrate$tables$WR_highlow$plot
winrate$tables$highlow
winrate$tables$WR_highlow
winrate$tables$WR_highlow$table[[1]] %>% distinct(championName)
winrate$tables$WR_highlow$table[[1]] %>% distinct(championName) %>% left_join(winrate$tables$highlow, by = championName)
winrate$tables$WR_highlow$table[[1]] %>% distinct(championName) %>% left_join(winrate$tables$highlow, by = "championName")
winrate$tables$WR_highlow$table[[1]] %>% distinct(championName) %>% left_join(winrate$tables$highlow, by = "championName") %>% {.[[1]]}
GET_WR_DATA <- function(ROLE, TABLE1 = data.temp$goldPercent, TABLE2 = winrate$tables$highlow){
glm_data <- TABLE1 %>%
filter(
championName %in% (TABLE2 %>%
filter(individualPosition == ROLE) %>%
{.$championName})
) %>%
return()
}
GET_WR_MODEL <- function(table){
glm(win ~ championName*goldEarned, data = table, family = "binomial") %>%
return()
}
GET_WR_PLOTS <- function(ROLE, table, table2 = winrate$tables$highlow){
models <- list()
preds <- list()
goldRange <- data.frame(goldEarned = seq(0, .75, length.out = 75))
champions <- table %>%
distinct(championName) %>%
left_join(
table2,
by = "championName"
)
plot <- plot_ly()
for(i in 1:nrow(champions)){
models[[i]] <- table %>%
filter(championName == champions$championName[[i]]) %>%
filter(individualPosition == ROLE) %>%
glm(formula = win~goldEarned, family = "binomial", data = .)
preds[[i]] <- predict.glm(models[[i]], type = "response", newdata = goldRange)
if(champions$win[[i]] == "high"){
plot <- plot %>%
add_trace(
x = goldRange$goldEarned,
y = preds[[i]],
type = "scatter",
mode = "lines",
name = champions$championName[[i]]
)
} else if(champion$win[[i]] == "low"){
plot <- plot %>%
add_trace(
x = goldRange$goldEarned,
y = preds[[i]],
type = "scatter",
mode = "lines",
name = champions$championName[[i]],
line = list(dash = "dash")
)
}
}
plot <- plot %>%
layout(
xaxis = list(title = "Gold Percent"),
yaxis = list(title ="Predicted Probability of Winning"),
title = paste0("Top and Bottom 3 Winrate Champions (", str_to_title(ROLE), ")")
)
return(plot)
}
winrate$tables$WR_highlow <- data.temp$WR_highlow.temp %>%
mutate(
plot = map2(
ROLE,
table,
.f = GET_WR_PLOTS
)
)
winrate$tables$WR_highlow <- data.temp$WR_highlow.temp %>%
mutate(
plot = pmap(
.,
.f = GET_WR_PLOTS
)
)
GET_WR_PLOTS <- function(ROLE, table, table2 = winrate$tables$highlow, ...){
models <- list()
preds <- list()
goldRange <- data.frame(goldEarned = seq(0, .75, length.out = 75))
champions <- table %>%
distinct(championName) %>%
left_join(
table2,
by = "championName"
)
plot <- plot_ly()
for(i in 1:nrow(champions)){
models[[i]] <- table %>%
filter(championName == champions$championName[[i]]) %>%
filter(individualPosition == ROLE) %>%
glm(formula = win~goldEarned, family = "binomial", data = .)
preds[[i]] <- predict.glm(models[[i]], type = "response", newdata = goldRange)
if(champions$win[[i]] == "high"){
plot <- plot %>%
add_trace(
x = goldRange$goldEarned,
y = preds[[i]],
type = "scatter",
mode = "lines",
name = champions$championName[[i]]
)
} else if(champion$win[[i]] == "low"){
plot <- plot %>%
add_trace(
x = goldRange$goldEarned,
y = preds[[i]],
type = "scatter",
mode = "lines",
name = champions$championName[[i]],
line = list(dash = "dash")
)
}
}
plot <- plot %>%
layout(
xaxis = list(title = "Gold Percent"),
yaxis = list(title ="Predicted Probability of Winning"),
title = paste0("Top and Bottom 3 Winrate Champions (", str_to_title(ROLE), ")")
)
return(plot)
}
winrate$tables$WR_highlow <- data.temp$WR_highlow.temp %>%
mutate(
plot = pmap(
.,
.f = GET_WR_PLOTS
)
)
GET_WR_DATA <- function(ROLE, TABLE1 = data.temp$goldPercent, TABLE2 = winrate$tables$highlow){
glm_data <- TABLE1 %>%
filter(
championName %in% (TABLE2 %>%
filter(individualPosition == ROLE) %>%
{.$championName})
) %>%
return()
}
GET_WR_MODEL <- function(table){
glm(win ~ championName*goldEarned, data = table, family = "binomial") %>%
return()
}
GET_WR_PLOTS <- function(ROLE, table, table2 = winrate$tables$highlow, ...){
models <- list()
preds <- list()
goldRange <- data.frame(goldEarned = seq(0, .75, length.out = 75))
champions <- table %>%
distinct(championName) %>%
left_join(
table2,
by = "championName"
)
plot <- plot_ly()
for(i in 1:nrow(champions)){
models[[i]] <- table %>%
filter(championName == champions$championName[[i]]) %>%
filter(individualPosition == ROLE) %>%
glm(formula = win~goldEarned, family = "binomial", data = .)
preds[[i]] <- predict.glm(models[[i]], type = "response", newdata = goldRange)
if(champions$win[[i]] == "high"){
plot <- plot %>%
add_trace(
x = goldRange$goldEarned,
y = preds[[i]],
type = "scatter",
mode = "lines",
name = champions$championName[[i]]
)
} else if(champions$win[[i]] == "low"){
plot <- plot %>%
add_trace(
x = goldRange$goldEarned,
y = preds[[i]],
type = "scatter",
mode = "lines",
name = champions$championName[[i]],
line = list(dash = "dash")
)
}
}
plot <- plot %>%
layout(
xaxis = list(title = "Gold Percent"),
yaxis = list(title ="Predicted Probability of Winning"),
title = paste0("Top and Bottom 3 Winrate Champions (", str_to_title(ROLE), ")")
)
return(plot)
}
winrate$tables$WR_highlow <- data.temp$WR_highlow.temp %>%
mutate(
plot = pmap(
.,
.f = GET_WR_PLOTS
)
)
winrate$tables$WR_highlow$plot
winrate$tables$WR_highlow$plot
winrate$plots$covariate
winrate$tables$covariate.temp <- expand.grid(
champions.scraped$name,
champions.scraped$name
) %>%
apply(., 1, sort) %>% # Removing rows symmetrically, no need to double search
t() %>%
unique() %>%
as_tibble() %>%
rename(Champ1 = V1, Champ2 = V2) %>%
filter(Champ1 != Champ2) # Removing diagonal elements
# This takes SO damn long to run, I wonder if there is a better way to do this...
# Doing this in two steps to avoid running long functions again
winrate$tables$covariate.temp2 <- winrate$tables$covariate.temp %>%
mutate(
gameList = pmap(
.,
.f = function(Champ1, Champ2, TABLE = data.temp$champTeams){
TABLE %>%
group_by(match, win) %>%
filter(champion == Champ1) %>% # Okay this is way faster but still turbo slow
filter(str_detect(team, paste0("_", Champ2, "_"))) %>%
ungroup() %>%
return()
}
)
)
winrate$tables$covariate <- winrate$tables$covariate.temp2 %>%
mutate(
data = map(
gameList,
.f = function(gameList){
gameList %>%
summarize(winrate = mean(win), games = n()) %>%
return()
}
)
) %>%
unnest(cols = c(data))
# Making a new table to make searching particular champion pairs easier
winrate$tables$covariate.search <- bind_rows(
winrate$tables$covariate,
winrate$tables$covariate %>%
rename(Champ2 = 1, Champ1 = 2)
)
winrate$plots$covariate <- winrate$tables$covariate %>%
plot_ly(
x = ~games,
y = ~winrate,
text = ~paste(Champ1, Champ2, sep = " "),
type = "scatter",
mode = "markers"
)
winrate$plots$covariate
winrate$plots$base
winrate$tables$base <- gameInfo.win %>%
group_by(championName) %>%
summarize(winrate = mean(win), games = n(), .groups = "drop")
head(winrate$tables$base)
winrate$plots$base <- winrate$tables$base %>%
left_join(
champions.scraped,
by = c("championName" = "name")
) %>%
plot_ly(
x = ~games,
y = ~winrate,
color = ~tag,
text = ~championName,
type = "scatter",
mode = "markers"
)
winrate$plots$base
winrate$plots$base
winrate$tables$covariate.temp
winrate$tables$covariate.temp %>% filter(champ1 == "Akshan")
winrate$tables$covariate.temp %>% filter(Champ1 == "Akshan")
