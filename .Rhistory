lane = factor(lane, levels = c("BOTTOM", "MIDDLE", "JUNGLE", "TOP", "NONE")),
role = factor(role, levels= c("SUPPORT", "CARRY", "NONE", "SOLO", "DUO")),
win = factor(win, levels = c(FALSE, TRUE))
)
gameInfo %>%
filter(individualPosition != "Invalid") %>%
ggplot(aes(x = individualPosition, y = totalTimeSpentDead)) +
geom_boxplot()
goldPercent.tier.fit <- glm(win~goldPercent*individualPosition*tier, data = goldPercent, family = "binomial")
goldPercent.tier.fit <- glm(win~goldEarned*individualPosition*tier, data = goldPercent, family = "binomial")
summary(goldPercent.tier.fit)
plot_model(goldPercent.tier.fit, type = "int")
goldPercent.tier.fit <- glm(win~goldEarned*individualPosition*tier, data = goldPercent %>% filter(individualPosition != "Invalid"), family = "binomial")
summary(goldPercent.tier.fit)
plot_model(goldPercent.tier.fit, type = "int")
?plot_model
save_plot("./plots/goldPercent.tier.jpg")
goldPercent$goldEarned %>% mean
goldPercent$goldEarned %>% std
goldPercent$goldEarned %>% sd
View(gameInfo)
damageDoneChamp.fit <- glm(win~totalDamageDealtToChampions*individualPosition, data = gameInfo %>% filter(individualPosition != "Invalid"), family = "binomial")
summary(damageDoneChamp.fit)
plot_model(damageDoneChamp.fit, type = "int")
gameInfo %>%
filter(individualPosition != "Invalid") %>%
group_by(individualPosition) %>%
summarize(avg = mean(individualPosition))
gameInfo %>%
filter(individualPosition != "Invalid") %>%
group_by(individualPosition) %>%
summarize(avg = mean(totalDamageDealtToChampions))
gameInfo %>%
filter(individualPosition != "Invalid") %>%
ggplot(aes(x = individualPosition, y = totalDamageDealtToChampions)) +
geom_histogram()
gameInfo %>%
filter(individualPosition != "Invalid") %>%
ggplot(aes(x = individualPosition, y = totalDamageDealtToChampions)) +
geom_boxplot()
gameInfo %>%
filter(individualPosition != "Invalid") %>%
group_by(individualPosition) %>%
summarize(avg_damage = mean(totalDamageDealtToChampions))
gameInfo %>%
filter(individualPosition != "Invalid") %>%
ggplot(aes(x = individualPosition, y = totalDamageDealt)) +
geom_boxplot()
gameInfo %>%
filter(individualPosition != "Invalid") %>%
group_by(individualPosition) %>%
summarize(avg_damage = mean(totalDamageDealt))
gameInfo %>%
filter(individualPosition != "Invalid") %>%
ggplot(aes(x = individualPosition, y = totalDamageDealt)) +
geom_boxplot()
gameInfo %>%
filter(individualPosition != "Invalid") %>%
group_by(individualPosition) %>%
summarize(avg_damage = mean(totalDamageDealt))
gameInfo %>%
filter(individualPosition != "Invalid") %>%
ggplot(aes(x = individualPosition, y = totalDamageDealtToChampions)) +
geom_boxplot()
gameInfo %>%
filter(individualPosition != "Invalid") %>%
group_by(individualPosition) %>%
summarize(avg_damage = mean(totalDamageDealtToChampions))
gameInfo %>%
filter(individualPosition != "Invalid") %>%
ggplot(aes(x = individualPosition, y = totalDamageDealt)) +
geom_boxplot()
gameInfo %>%
filter(individualPosition != "Invalid") %>%
ggplot(aes(x = individualPosition, y = totalDamageDealtToChampions)) +
geom_boxplot()
gameInfo %>%
filter(individualPosition != "Invalid") %>%
group_by(individualPosition) %>%
summarize(avg_damage_champ = mean(totalDamageDealtToChampions), avg_damage_total = mean(totalDamageDealt))
damageDone <- gameInfo %>%
filter(individualPosition != "Invalid") %>%
select(individualPosition, totalDamageDealtToChampions, totalDamageDealt)
damageDone
ggplot(aes(x = individualPosition, y = totalDamageDealt)) +
geom_boxplot()
damageDone <- gameInfo %>%
filter(individualPosition != "Invalid") %>%
select(individualPosition, totalDamageDealtToChampions, totalDamageDealt)
damageDone %>%
ggplot(aes(x = individualPosition, y = totalDamageDealt)) +
geom_boxplot()
damageDone %>%
ggplot(aes(x = individualPosition, y = totalDamageDealtToChampions)) +
geom_boxplot()
damageDone
filter(individualPosition != "Invalid") %>%
group_by(individualPosition) %>%
summarize(avg_damage_champ = mean(totalDamageDealtToChampions), avg_damage_total = mean(totalDamageDealt))
damageDone <- gameInfo %>%
filter(individualPosition != "Invalid") %>%
select(individualPosition, totalDamageDealtToChampions, totalDamageDealt)
damageDone %>%
ggplot(aes(x = individualPosition, y = totalDamageDealt)) +
geom_boxplot()
damageDone %>%
ggplot(aes(x = individualPosition, y = totalDamageDealtToChampions)) +
geom_boxplot()
damageDone %>%
filter(individualPosition != "Invalid") %>%
group_by(individualPosition) %>%
summarize(avg_damage_champ = mean(totalDamageDealtToChampions), avg_damage_total = mean(totalDamageDealt))
kruskal.test(totalDamageDealt, data = damageDone)
kruskal.test(totalDamageDealt~individualPosition, data = damageDone)
kruskal.test(totalDamageDealt~individualPosition, data = damageDone)
pairwise.wilcox.test(damageDone$totalDamageDealt, damageDone$individualPosition, p.adjust.method = "fdr")
kruskal.test(totalDamageDealtToChampions~individualPosition, data = damageDone)
pairwise.wilcox.test(damageDone$totalDamageDealtToChampions, damageDone$individualPosition, p.adjust.method = "fdr")
wilcox.test(totalDamageDealt~individualPosition, data = damageDone)
kruskal.test(totalDamageDealt~individualPosition, data = damageDone)
pairwise.wilcox.test(damageDone$totalDamageDealt, damageDone$individualPosition, p.adjust.method = "fdr")
champions
champions.raw
champions.raw$data$Aatrox$recommended
champions.raw$data$Aatrox$blurb
champions.raw$data$Aatrox$partype
champions.raw$data$Zyra$info
champions.raw$data$Elise$info
champions.raw$data$LeeSin$info
champions <- as_tibble(do.call(rbind, champions.raw$data)) %>%
select(id, key, tags, info) %>%
unnest(cols = c(id, key, tags, info))
champions <- as_tibble(do.call(rbind, champions.raw$data)) %>%
select(id, key, tags, info) %>%
unnest(cols = c(id, key, tags))
# Tags will be used downstream (maybe? hopefully... ?_?)
head(champions)
champions$info
champions$info[[1]]
unnest(cols = c(id, key, tags))
do.call(rbind, info) %>%
as_tibble() %>%
return()
champions <- as_tibble(do.call(rbind, champions.raw$data)) %>%
select(id, key, tags, info) %>%
mutate(info = map(
info,
.f = function(info){
do.call(rbind, info) %>%
as_tibble() %>%
return()
}
))
champions <- as_tibble(do.call(rbind, champions.raw$data)) %>%
select(id, key, tags, info) %>%
mutate(info = map(
info,
.f = function(info){
do.call(rbind, info) %>%
as_tibble() %>%
return()
}
))
# Tags will be used downstream (maybe? hopefully... ?_?)
head(champions)
champions <- as_tibble(do.call(rbind, champions.raw$data)) %>%
select(id, key, tags, info) %>%
mutate(info = map(
info,
.f = function(info){
do.call(rbind, info) %>%
as_tibble() %>%
return()
}
))
# Tags will be used downstream (maybe? hopefully... ?_?)
head(champions)
champions <- as_tibble(do.call(rbind, champions.raw$data)) %>%
select(id, key, tags, info) %>%
mutate(info = map(
info,
.f = function(info){
do.call(rbind, info) %>%
as_tibble() %>%
return()
}
)) %>%
unnest(cols = c(id, key, tags, info))
champions <- as_tibble(do.call(rbind, champions.raw$data)) %>%
select(id, key, tags, info) %>%
mutate(info = map(
info,
.f = function(info){
do.call(rbind, info) %>%
as_tibble() %>%
return()
}
)) %>%
unnest(cols = c(id, key, tags))
# Tags will be used downstream (maybe? hopefully... ?_?)
head(champions)
champions$info
champions$info[[1]]
champions$info[[2]]
champions$info[[3]]
champions <- as_tibble(do.call(rbind, champions.raw$data)) %>%
select(id, key, tags, info) %>%
mutate(info = map(
info,
.f = function(info){
do.call(rbind, info) %>%
as_tibble() %>%
return()
}
)) %>%
unnest(cols = c(id, key))
# Tags will be used downstream (maybe? hopefully... ?_?)
head(champions)
champions <- as_tibble(do.call(rbind, champions.raw$data)) %>%
select(id, key, tags, info) %>%
# mutate(info = map(
#   info,
#   .f = function(info){
#
#     do.call(rbind, info) %>%
#       as_tibble() %>%
#       return()
#
#   }
# )) %>%
unnest(cols = c(id, key))
# Tags will be used downstream (maybe? hopefully... ?_?)
head(champions)
champions$info[[1]]
champions <- as_tibble(do.call(rbind, champions.raw$data)) %>%
select(id, key, tags, info) %>%
mutate(info = map(
info,
.f = function(info){
info %>%
as_tibble() %>%
return()
}
)) %>%
unnest(cols = c(id, key))
# Tags will be used downstream (maybe? hopefully... ?_?)
head(champions)
champions$info
#champions.raw <- fromJSON("http://ddragon.leagueoflegends.com/cdn/11.10.1/data/en_US/championFull.json")
champions <- as_tibble(do.call(rbind, champions.raw$data)) %>%
select(id, key, tags, info) %>%
mutate(info = map(
info,
.f = function(info){
info %>%
as_tibble() %>%
return()
}
)) %>%
unnest(cols = c(id, key, info))
# Tags will be used downstream (maybe? hopefully... ?_?)
head(champions)
#champions.raw <- fromJSON("http://ddragon.leagueoflegends.com/cdn/11.10.1/data/en_US/championFull.json")
champions <- as_tibble(do.call(rbind, champions.raw$data)) %>%
select(id, key, tags, info) %>%
mutate(info = map(
info,
.f = function(info){
info %>%
as_tibble() %>%
return()
}
)) %>%
unnest(cols = c(id, key, tag, info))
#champions.raw <- fromJSON("http://ddragon.leagueoflegends.com/cdn/11.10.1/data/en_US/championFull.json")
champions <- as_tibble(do.call(rbind, champions.raw$data)) %>%
select(id, key, tags, info) %>%
mutate(info = map(
info,
.f = function(info){
info %>%
as_tibble() %>%
return()
}
)) %>%
unnest(cols = c(id, key, tags, info))
# Tags will be used downstream (maybe? hopefully... ?_?)
head(champions)
?pivot_wider
champions <- as_tibble(do.call(rbind, champions.raw$data)) %>%
select(id, key, tags, info) %>%
mutate(info = map(
info,
.f = function(info){
info %>%
as_tibble() %>%
return()
}
)) %>%
unnest(cols = c(id, key, tags, info)) %>%
pivot_wider(
values_from = tags,
names_to = c("tag1", "tag2")
)
#champions.raw <- fromJSON("http://ddragon.leagueoflegends.com/cdn/11.10.1/data/en_US/championFull.json")
champions <- as_tibble(do.call(rbind, champions.raw$data)) %>%
select(id, key, tags, info) %>%
mutate(info = map(
info,
.f = function(info){
info %>%
as_tibble() %>%
return()
}
)) %>%
unnest(cols = c(id, key, tags, info))
# Tags will be used downstream (maybe? hopefully... ?_?)
head(champions)
#champions.raw <- fromJSON("http://ddragon.leagueoflegends.com/cdn/11.10.1/data/en_US/championFull.json")
champions <- as_tibble(do.call(rbind, champions.raw$data)) %>%
select(id, key, tags, info) %>%
mutate(info = map(
info,
.f = function(info){
info %>%
as_tibble() %>%
return()
}
)) %>%
unnest(cols = c(id, key, info))
# Tags will be used downstream (maybe? hopefully... ?_?)
head(champions)
champions %>% arrange(desc(difficulty))
champions %>% arrange(difficulty)
gameInfo$championId[[1]]
gameInfo %>%
left_join(
champions %>%
filter(!(name %in% c("Seraphine", "Rell"))) %>%  # These two champions have no associated difficulty
select(difficulty, key),
by = c("championId" = "key")
)
gameInfo %>%
left_join(
champions %>%
filter(!(id %in% c("Seraphine", "Rell"))) %>%  # These two champions have no associated difficulty
select(difficulty, key),
by = c("championId" = "key")
)
#champions.raw <- fromJSON("http://ddragon.leagueoflegends.com/cdn/11.10.1/data/en_US/championFull.json")
champions <- as_tibble(do.call(rbind, champions.raw$data)) %>%
select(id, key, tags, info) %>%
mutate(info = map(
info,
.f = function(info){
info %>%
as_tibble() %>%
return()
}
)) %>%
unnest(cols = c(id, key, info)) %>%
mutate(key = as.integer(key))
# Tags will be used downstream (maybe? hopefully... ?_?)
head(champions)
# Note Rell and Seraphine have no stats
gameInfo %>%
left_join(
champions %>%
filter(!(id %in% c("Seraphine", "Rell"))) %>%  # These two champions have no associated difficulty
select(difficulty, key),
by = c("championId" = "key")
)
gameInfo %>%
left_join(
champions %>%
filter(!(id %in% c("Seraphine", "Rell"))) %>%  # These two champions have no associated difficulty
select(difficulty, key),
by = c("championId" = "key")
) %>%
filter(!is.na(difficulty))
championDifficulty <- gameInfo %>%
left_join(
champions %>%
filter(!(id %in% c("Seraphine", "Rell"))) %>%  # These two champions have no associated difficulty
select(difficulty, key),
by = c("championId" = "key")
) %>%
filter(!is.na(difficulty))
championDifficulty <- gameInfo %>%
left_join(
champions %>%
filter(!(id %in% c("Seraphine", "Rell"))) %>%  # These two champions have no associated difficulty
select(difficulty, key),
by = c("championId" = "key")
) %>%
filter(!is.na(difficulty))
championDifficulty.fit <- glm(win ~ difficulty*tier, data = championDifficulty, family = "binomial")
summary(championDifficulty.fit)
write.csv("./data/matchData.csv")
library(tidyverse)
library(jsonlite)
library(httr)
library(sjPlot)
write.csv(gameInfo, "./data/matchData.csv")
results <- list(
models = list(),
plots = list()
)
results$models$visionScore <- visionScore.fit.basic
summary(results$models$visionScore)
results$plots$visionScore <- plot_model(results$models$visionScore, type = "pred", grid = F)
results$plots$visionScore
rm(visionScore.fit)
results$models$visionScore.role <- visionScore.fit.role
summary(results$models$visionScore.role)
results$plotsvisionScore.role <- plot_model(visionScore.fit.role, type = "int")
results$plotsvisionScore.role
results <- list(
models = list(),
plots = list()
)
data.temp <- list()
results$models$visionScore <- glm(win ~ visionScore, family = "binomial", data = gameInfo)
summary(results$models$visionScore)
results$plots$visionScore <- plot_model(results$models$visionScore, type = "pred", grid = F)
results$plots$visionScore
results$models$visionScore.role <- glm(win ~ visionScore*individualPosition, family = "binomial", data = gameInfo %>% filter(individualPosition != "Invalid"))
summary(results$models$visionScore.role)
results$plotsvisionScore.role <- plot_model(visionScore.fit.role, type = "int")
results$plotsvisionScore.role
results$plots$visionScore.role <- results$plots$visionScore.role
rm(results$plotsvisionScore.role)
results$plotsvisionScore.role<-NULL
results$plots$visionScore.role
results$plots$visionScore
results$plots$visionScore.role <- plot_model(visionScore.fit.role, type = "int")
results$plots$visionScore.role
results$plots$visionScore.role <- plot_model(results$models$visionScore.role, type = "int")
results$plots$visionScore.role
rm(visionScore.fit.basic)
rm(visionScore.fit.role)
data.temp$goldPercent <- gameInfo %>%
group_by(match, win) %>% # here win is just used to group team
mutate(team_gold = sum(goldEarned), goldEarned = goldEarned / team_gold) %>%
ungroup()
results$models$goldPercent <- glm(win ~ goldEarned*individualPosition, data = data.temp$goldPercent %>% filter(individualPosition != "Invalid"), family = "binomial")
summary(results$models$goldPercent)
rm(goldPercent, goldPercent.fit)
results$plots$goldPercent <- plot_model(results$models$goldPercent, type = "int")
results$plots$goldPercent
results$models$goldPercent.tier <- goldPercent.tier.fit
summary(results$models$goldPercent.tier)
results$plots$goldPercent.tier <- plot_model(results$models$goldPercent.tier, type = "int")
results$plots$goldPercent.tier
results$plots$goldPercent.tier[[4]]
results$models$damageDoneChamp <- damageDoneChamp.fit
results$plots$goldPercent + ggtitle("dabbin")
results$plots$goldPercent
summary(results$models$damageDoneChamp)
results$plots$damageDoneChamp <- plot_model(damageDoneChamp.fit, type = "int")
results$plots$damageDoneChamp
getMatchData <- list()
data.temp$tier <- c("IRON", "BRONZE", "SILVER", "GOLD", "PLATINUM", "DIAMOND")
data.temp$division <- c("I", "II", "III", "IV")
tier_div <- expand_grid(data.temp$tier, data.temp$division)
rm(tier, division, tier_div)
data.temp$tier_div <- expand_grid(data.temp$tier, data.temp$division)
data.temp$tier_div
data.temp$tier_div <- expand_grid(data.temp$tier, data.temp$division) %>%
rename(tier = 1, division = 2)
data.temp$tier_div
matchData <- list()
matchData$accounts.raw <- accounts.raw
matchData$accounts <- accounts
matchData$summonerIds <- summonerIds
head(matchData$accounts)
matchData$match_history <- match_history
View(match_history.raw)
View(match_history)
matchData$matches <- matches
head(matchData$matches)
matchData$gameInfo.raw <- gameInfo.raw
matchData$gameInfo.low <- gameInfo.low
matchData$gameInfo.high <- gameInfo.high
rm(summonerIds)
rm(matches)
rm(match_history, match_history.raw)
rm(goldPercent.tier.fit)
data.temp$championDifficulty <- championDifficulty
results$models$championDifficulty <-championDifficulty.fit
summary(results$models$championDifficulty)
kruskal.test(totalDamageDealt~individualPosition, data = data.temp$damageDone)
data.temp$damageDone <- gameInfo %>%
filter(individualPosition != "Invalid") %>%
select(individualPosition, totalDamageDealtToChampions, totalDamageDealt)
data.temp$damageDone %>%
ggplot(aes(x = individualPosition, y = totalDamageDealt)) +
geom_boxplot()
data.temp$damageDone %>%
ggplot(aes(x = individualPosition, y = totalDamageDealtToChampions)) +
geom_boxplot()
data.temp$damageDone %>%
filter(individualPosition != "Invalid") %>%
group_by(individualPosition) %>%
summarize(avg_damage_champ = mean(totalDamageDealtToChampions), avg_damage_total = mean(totalDamageDealt))
kruskal.test(totalDamageDealt~individualPosition, data = data.temp$damageDone)
pairwise.wilcox.test(data.temp$damageDone$totalDamageDealt, data.temp$damageDone$individualPosition, p.adjust.method = "fdr")
rm(gameInfo.low,gameInfo.high,gameInfo.raw)
rm(damageDone, damageDoneChamp.fit)
rm(championDifficulty, championDifficulty.fit, accounts, accounts.raw)
rm(getMatchData)
rm(visionScore.mean, visionScore.sd)
