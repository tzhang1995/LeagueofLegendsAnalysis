load("../data/league.RDATA")
library(tidyverse)
library(data.table)
library(randomForest)
library(rpart.plot)
data.tree$temp.data$gameInfo.temp <- gameInfo %>%
left_join(
champions.scraped,
by = c("championName" = "name")
) %>%
group_by(match) %>%
mutate(
team = rleid(win)
) %>%
ungroup()
data.tree <- list(
models = list(),
plots = list(),
temp.data = list()
)
data.tree$temp.data$gameInfo.temp <- gameInfo %>%
left_join(
champions.scraped,
by = c("championName" = "name")
) %>%
group_by(match) %>%
mutate(
team = rleid(win)
) %>%
ungroup()
data.tree$temp.data$gameInfo.temp[1:10,]
data.tree$temp.data$gameInfo.temp
data.tree$temp.data$gameInfo.temp %>%
group_by(match, team) %>%
count(tag)
data.tree$temp.data$gameInfo.temp %>%
group_by(match, team) %>%
count(tag) %>%
pivot_longer(
cols = c("tag", "n"),
names_from = "tag",
values_from = "n"
)
?pivot_longer
data.tree$temp.data$gameInfo.temp %>%
group_by(match, team) %>%
count(tag) %>%
pivot_longer(
names_from = "tag",
values_from = "n"
)
data.tree$temp.data$gameInfo.temp[1:100,] %>%
group_by(match, team) %>%
count(tag) %>%
pivot_longer(
names_from = "tag",
values_from = "n"
)
data.tree$temp.data$gameInfo.temp[1:100,] %>%
group_by(match, team) %>%
count(tag)
?pivot_wider
data.tree$temp.data$gameInfo.temp[1:100,] %>%
group_by(match, team) %>%
count(tag) %>%
pivot_wider(
names_from = tag,
values_from = n
)
data.tree$temp.data$gameInfo.temp[1:100,] %>%
group_by(match, team) %>%
count(tag) %>%
pivot_wider(
names_from = tag,
values_from = n
) %>%
replace(is.na(.), 0)
data.tree$temp.data$gameInfo.temp[1:100,] %>%
group_by(match, team) %>%
count(tag) %>%
ungroup() %>%
pivot_wider(
names_from = tag,
values_from = n
) %>%
pivot_wider()
data.tree$temp.data$gameInfo.temp[1:100,] %>%
group_by(match, team) %>%
count(tag) %>%
ungroup() %>%
pivot_wider(
names_from = tag,
values_from = n
) %>%
pivot_wider() %>%
replace(is.na(.), 0)
data.tree$temp.data$gameInfo.tags <- data.tree$temp.data$gameInfo.temp %>%
group_by(match, team) %>%
count(tag) %>%
ungroup() %>%
pivot_wider(
names_from = tag,
values_from = n
) %>%
pivot_wider() %>%
replace(is.na(.), 0)
data.tree$temp.data$gameInfo.tree <- data.tree$temp.data$gameInfo.temp %>%
filter(win == 1) %>%
select(match, team_win = team)
data.tree$temp.data$gameinfo.tree
data.tree$temp.data$gameInfo.tree
data.tree$temp.data$gameInfo.tree <- data.tree$temp.data$gameInfo.temp %>%
filter(win == 1)
data.tree$temp.data$gameInfo.tree
data.tree$temp.data$gameInfo.temp %>% colnames()
data.tree$temp.data$gameInfo.temp$win
data.tree$temp.data$gameInfo.tree <- data.tree$temp.data$gameInfo.temp %>%
filter(win == TRUE) %>%
select(match, team_win = team)
data.tree$temp.data$gameInfo.tree
data.tree$temp.data$gameInfo.tree <- data.tree$temp.data$gameInfo.temp %>%
filter(win == TRUE) %>%
select(match, team_win = team) %>%
distinct(match, .keep_all = T)
data.tree$temp.data$gameInfo.tree
data.tree$temp.data$gameInfo.tree <- data.tree$temp.data$gameInfo.temp %>%
filter(win == TRUE) %>%
select(match, team_win = team) %>%
distinct(match, .keep_all = T) %>%
mutate(
team_win = factor(team_win, levels = c(1, 2))
)
data.tree$temp.data$gameInfo.tree
data.tree$temp.data$gameInfo.temp %>%
filter(team == 1)
data.tree$temp.data$gameInfo.tags %>%
filter(team == 1)
data.tree$temp.data$gameInfo.tags %>%
filter(team == 1) %>%
rename_with(
.fn = function(x){
paste0(x, "_1") %>%
return()
},
.cols = 3:8
)
data.tree$temp.data$gameInfo.tags %>%
filter(team == 1) %>%
rename_with(
.fn = function(x){
paste0(x, "_1") %>%
return()
},
.cols = 3:8
) %>%
select(!team)
data.tree$temp.data$gameInfo.tree <- data.tree$temp.data$gameInfo.temp %>%
filter(win == TRUE) %>%
select(match, team_win = team) %>%
distinct(match, .keep_all = T) %>%
mutate(
team_win = factor(team_win, levels = c(1, 2))
) %>%
left_join(
data.tree$temp.data$gameInfo.tags %>%
filter(team == 1) %>%
rename_with(
.fn = function(x){
paste0(x, "_1") %>%
return()
},
.cols = 3:8
) %>%
select(!team),
by = "match"
) %>%
left_join(
data.tree$temp.data$gameInfo.tags %>%
filter(team == 2) %>%
rename_with(
.fn = function(x){
paste0(x, "_2") %>%
return()
},
.cols = 3:8
) %>%
select(!team),
by = "match"
)
data.tree$temp.data$gameInfo.tree
# Setting Seed for Reproducibility
set.seed(3)
data.tree$temp.data$sample <- sample(data.tree$temp.data$gameInfo.tree$match, nrow(data.tree$temp.data$gameInfo.tree)*.6)
data.tree$temp.data$sample
data.tree$temp.data$sample <- sample(data.tree$temp.data$gameInfo.tree$match, nrow(data.tree$temp.data$gameInfo.tree)*.7)
data.tree$temp.data$train <- data.tree$temp.data$gameInfo.tree %>%
filter(match %in% data.tree$temp.data$sample)
data.tree$temp.data$test <- data.tree$temp.data$gameInfo.tree %>%
filter(!match %in% data.tree$temp.data$sample)
View(gameInfo)
View(data.tree)
# Setting Seed for Reproducibility
set.seed(3)
data.tree$temp.data$sample <- sample(data.tree$temp.data$gameInfo.tree$match, nrow(data.tree$temp.data$gameInfo.tree)*.7)
data.tree$temp.data$train <- data.tree$temp.data$gameInfo.tree %>%
filter(match %in% data.tree$temp.data$sample)
data.tree$temp.data$test <- data.tree$temp.data$gameInfo.tree %>%
filter(!match %in% data.tree$temp.data$sample)
data.tree$models$teamComp_forest <- randomForest(
win ~ !match,
data = data.tree$temp.data$train,
importance = TRUE,
na.action = na.omit
)
data.tree$models$teamComp_forest <- randomForest(
team_win ~ !match,
data = data.tree$temp.data$train,
importance = TRUE,
na.action = na.omit
)
set.seed(3)
data.tree$models$teamComp_forest <- randomForest(
team_win ~ .,
data = data.tree$temp.data$train %>%
select(!match),
importance = TRUE,
na.action = na.omit
)
data.tree$models$teamComp_forest
?randomForest
data.tree$temp.data$train %>% select(!match)
set.seed(3)
data.tree$models$teamComp_forest <- randomForest(
team_win ~ .,
data = data.tree$temp.data$train %>%
select(!match),
ntree = 200000,
importance = TRUE,
na.action = na.omit
)
set.seed(3)
data.tree$models$teamComp_forest <- randomForest(
team_win ~ .,
data = data.tree$temp.data$train %>%
select(!match),
ntree = 5000,
importance = TRUE,
na.action = na.omit
)
gc()
set.seed(3)
data.tree$models$teamComp_forest <- randomForest(
team_win ~ .,
data = data.tree$temp.data$train %>%
select(!match),
ntree = 1000,
importance = TRUE,
na.action = na.omit
)
data.tree$models$teamComp_forest
data.tree$temp.data$gameInfo.tree
data.tree$temp.data$gameInfo.tree <- data.tree$temp.data$gameInfo.temp %>%
filter(win == TRUE) %>%
select(match, team_win = team) %>%
distinct(match, .keep_all = T) %>%
mutate(
team_win = factor(team_win, levels = c(1, 2))
) %>%
left_join(
data.tree$temp.data$gameInfo.tags %>%
filter(team == 1) %>%
rename_with(
.fn = function(x){
paste0(x, "_1") %>%
return()
},
.cols = 3:8
) %>%
select(!team),
by = "match"
) %>%
left_join(
data.tree$temp.data$gameInfo.tags %>%
filter(team == 2) %>%
rename_with(
.fn = function(x){
paste0(x, "_2") %>%
return()
},
.cols = 3:8
) %>%
select(!team),
by = "match"
) %>%
mutate_if(is.integer, as.factor)
data.tree$temp.data$gameInfo.tree
# Setting Seed for Reproducibility
set.seed(3)
data.tree$temp.data$sample <- sample(data.tree$temp.data$gameInfo.tree$match, nrow(data.tree$temp.data$gameInfo.tree)*.7)
data.tree$temp.data$train <- data.tree$temp.data$gameInfo.tree %>%
filter(match %in% data.tree$temp.data$sample)
data.tree$temp.data$test <- data.tree$temp.data$gameInfo.tree %>%
filter(!match %in% data.tree$temp.data$sample)
set.seed(3)
data.tree$models$teamComp_forest <- randomForest(
team_win ~ . - match,
data = data.tree$temp.data$train,
ntree = 500,
importance = TRUE,
na.action = na.omit
)
data.tree$models$teamComp_forest
data.tree$temp.data$gameInfo.tree
data.tree$temp.data$gameInfo.tree %>% count(team_win)
data.tree$temp.data$gameInfo.tree %>% count(team_win) %>% mutate(n = n/sum(n))
data.tree$temp.data$gameInfo.tree %>% count(team_win) %>% mutate(n = n/sum(n)) %>% view()
data.tree$temp.data$gameInfo.tree %>%
count(team_win) %>%
mutate(n = n/sum(n))
install.packages("word2vec")
library(word2vec)
?word2vec
hero.cluster <- list(
models = list(),
plots = list(),
temp.data = list()
)
hero.cluster$temp.data$gameInfo <- gameInfo %>%
select(match, win, championName)
hero.cluster$temp.data$gameInfo %>% head
rm(hero.cluster)
championCluster <- list(
models = list(),
plots = list(),
temp.data = list()
)
championCluster$temp.data$gameInfo <- gameInfo %>%
select(match, win, championName) %>%
group_by(match, win) %>%
mutate(championNumber = row_number()) %>%
pivot_wider(
names_from = championNumber,
values_from = championName
) %>%
transmute(match = match, win = win, team = str_c(`1`,`2`,`3`,`4`,`5`, sep = " "))
championCluster$temp.data$gameInfo
championCluster$temp.data$gameInfo <- NULL
championCluster$temp.data$teams <- gameInfo %>%
select(match, win, championName) %>%
group_by(match, win) %>%
mutate(championNumber = row_number()) %>%
pivot_wider(
names_from = championNumber,
values_from = championName
) %>%
transmute(match = match, win = win, team = str_c(`1`,`2`,`3`,`4`,`5`, sep = " ")) %>%
ungroup() %>%
select(team)
championCluster$temp.data$teams
championCluster$models$nlpModel <- championCluster$temp.data$teams %>%
word2vec(x = ., type = "skip-gram", dim = 20, iter = 15)
championCluster$models$nlpModel <- word2vec(
x = championCluster$temp.data$teams$team,
type = "skip-gram",
dim = 20,
iter = 15
)
championCluster$models$nlpModel
championCluster$models$nlpModel %>%
summary()
install.packages("Rtsne")
library(Rtsne)
rpart.plot(data.tree$models$teamComp_forest)
importance(data.tree$models$teamComp_forest)
varImpPlot(data.tree$models$teamComp_forest)
varImpPlot(data.tree$models$teamComp_forest)
importance(data.tree$models$teamComp_forest)
varImpPlot(data.tree$models$teamComp_forest)
championCluster$models$nlpModel
?word2vec
# Embedding Matrix
championCluster$models$embeddingMatrix <- as.matrix(championCluster$models$nlpModel)
championCluster$models$embeddingMatrix
# Embedding Matrix
championCluster$models$embeddingMatrix <- as.matrix(championCluster$models$nlpModel)
?Rtsne
dim(championCluster$models$embeddingMatrix)
# Applying TSne
championCluster$models$Tsne <- Rtsne(championCluster$models$embeddingMatrix, pca = FALSE)
championCluster$plots$map <- championCluster$models$Tsne$Y %>%
as.data.frame() %>%
mutate(word = row.names(championCluster$models$embeddingMatrix)) %>%
ggplot(aes(x = V1, y = V2, label = word)) +
geom_text(size = 3)
championCluster$plots$map
championCluster$models$Tsne$Y
championCluster$temp.data$teams <- gameInfo %>%
select(match, win, championName) %>%
group_by(match, win) %>%
mutate(championNumber = row_number()) %>%
pivot_wider(
names_from = championNumber,
values_from = championName
) %>%
transmute(match = match, win = win, team = str_c(`1`,`2`,`3`,`4`,`5`, sep = ",")) %>%
ungroup() %>%
select(team)
championCluster$temp.data$teams
championCluster$models$nlpModel <- word2vec(
x = championCluster$temp.data$teams$team,
type = "skip-gram",
dim = 20,
iter = 15
)
# Embedding Matrix
championCluster$models$embeddingMatrix <- as.matrix(championCluster$models$nlpModel)
# Applying TSne
championCluster$models$Tsne <- Rtsne(championCluster$models$embeddingMatrix, pca = FALSE)
championCluster$plots$map <- championCluster$models$Tsne$Y %>%
as.data.frame() %>%
mutate(word = row.names(championCluster$models$embeddingMatrix)) %>%
ggplot(aes(x = V1, y = V2, label = word)) +
geom_text(size = 3)
championCluster$plots$map
championCluster$temp.data$teams <- gameInfo %>%
select(match, win, championName) %>%
group_by(match, win) %>%
mutate(championNumber = row_number()) %>%
pivot_wider(
names_from = championNumber,
values_from = championName
) %>%
transmute(match = match, win = win, team = str_c(`1`,`2`,`3`,`4`,`5`, sep = " ")) %>%
ungroup() %>%
select(team)
championCluster$temp.data$teams
set.seed(3)
championCluster$models$nlpModel <- word2vec(
x = championCluster$temp.data$teams$team,
type = "skip-gram",
dim = 20,
iter = 15
)
# Embedding Matrix
championCluster$models$embeddingMatrix <- as.matrix(championCluster$models$nlpModel)
# Applying TSne
championCluster$models$Tsne <- Rtsne(championCluster$models$embeddingMatrix, pca = FALSE)
championCluster$plots$map <- championCluster$models$Tsne$Y %>%
as.data.frame() %>%
mutate(word = row.names(championCluster$models$embeddingMatrix)) %>%
ggplot(aes(x = V1, y = V2, label = word)) +
geom_text(size = 3)
championCluster$plots$map
championCluster$plots$map
library(plotly)
championCluster$plots$map %>%
ggplotly()
championCluster$plots$map <- championCluster$plots$map %>%
ggplotly()
championCluster$plots$map
