distinct(match, .keep_all = T) %>%
mutate(
team_win = factor(team_win, levels = c(1, 2))
) %>%
left_join(
data.tree$temp.data$gameInfo.tags %>%
filter(team == 1) %>%
rename_with(
.fn = function(x){
paste0(x, "_1") %>%
return()
},
.cols = 3:8
) %>%
select(!team),
by = "match"
) %>%
left_join(
data.tree$temp.data$gameInfo.tags %>%
filter(team == 2) %>%
rename_with(
.fn = function(x){
paste0(x, "_2") %>%
return()
},
.cols = 3:8
) %>%
select(!team),
by = "match"
)
data.tree$temp.data$gameInfo.tree
# Setting Seed for Reproducibility
set.seed(3)
data.tree$temp.data$sample <- sample(data.tree$temp.data$gameInfo.tree$match, nrow(data.tree$temp.data$gameInfo.tree)*.6)
data.tree$temp.data$sample
data.tree$temp.data$sample <- sample(data.tree$temp.data$gameInfo.tree$match, nrow(data.tree$temp.data$gameInfo.tree)*.7)
data.tree$temp.data$train <- data.tree$temp.data$gameInfo.tree %>%
filter(match %in% data.tree$temp.data$sample)
data.tree$temp.data$test <- data.tree$temp.data$gameInfo.tree %>%
filter(!match %in% data.tree$temp.data$sample)
View(gameInfo)
View(data.tree)
# Setting Seed for Reproducibility
set.seed(3)
data.tree$temp.data$sample <- sample(data.tree$temp.data$gameInfo.tree$match, nrow(data.tree$temp.data$gameInfo.tree)*.7)
data.tree$temp.data$train <- data.tree$temp.data$gameInfo.tree %>%
filter(match %in% data.tree$temp.data$sample)
data.tree$temp.data$test <- data.tree$temp.data$gameInfo.tree %>%
filter(!match %in% data.tree$temp.data$sample)
data.tree$models$teamComp_forest <- randomForest(
win ~ !match,
data = data.tree$temp.data$train,
importance = TRUE,
na.action = na.omit
)
data.tree$models$teamComp_forest <- randomForest(
team_win ~ !match,
data = data.tree$temp.data$train,
importance = TRUE,
na.action = na.omit
)
set.seed(3)
data.tree$models$teamComp_forest <- randomForest(
team_win ~ .,
data = data.tree$temp.data$train %>%
select(!match),
importance = TRUE,
na.action = na.omit
)
data.tree$models$teamComp_forest
?randomForest
data.tree$temp.data$train %>% select(!match)
set.seed(3)
data.tree$models$teamComp_forest <- randomForest(
team_win ~ .,
data = data.tree$temp.data$train %>%
select(!match),
ntree = 200000,
importance = TRUE,
na.action = na.omit
)
set.seed(3)
data.tree$models$teamComp_forest <- randomForest(
team_win ~ .,
data = data.tree$temp.data$train %>%
select(!match),
ntree = 5000,
importance = TRUE,
na.action = na.omit
)
gc()
set.seed(3)
data.tree$models$teamComp_forest <- randomForest(
team_win ~ .,
data = data.tree$temp.data$train %>%
select(!match),
ntree = 1000,
importance = TRUE,
na.action = na.omit
)
data.tree$models$teamComp_forest
data.tree$temp.data$gameInfo.tree
data.tree$temp.data$gameInfo.tree <- data.tree$temp.data$gameInfo.temp %>%
filter(win == TRUE) %>%
select(match, team_win = team) %>%
distinct(match, .keep_all = T) %>%
mutate(
team_win = factor(team_win, levels = c(1, 2))
) %>%
left_join(
data.tree$temp.data$gameInfo.tags %>%
filter(team == 1) %>%
rename_with(
.fn = function(x){
paste0(x, "_1") %>%
return()
},
.cols = 3:8
) %>%
select(!team),
by = "match"
) %>%
left_join(
data.tree$temp.data$gameInfo.tags %>%
filter(team == 2) %>%
rename_with(
.fn = function(x){
paste0(x, "_2") %>%
return()
},
.cols = 3:8
) %>%
select(!team),
by = "match"
) %>%
mutate_if(is.integer, as.factor)
data.tree$temp.data$gameInfo.tree
# Setting Seed for Reproducibility
set.seed(3)
data.tree$temp.data$sample <- sample(data.tree$temp.data$gameInfo.tree$match, nrow(data.tree$temp.data$gameInfo.tree)*.7)
data.tree$temp.data$train <- data.tree$temp.data$gameInfo.tree %>%
filter(match %in% data.tree$temp.data$sample)
data.tree$temp.data$test <- data.tree$temp.data$gameInfo.tree %>%
filter(!match %in% data.tree$temp.data$sample)
set.seed(3)
data.tree$models$teamComp_forest <- randomForest(
team_win ~ . - match,
data = data.tree$temp.data$train,
ntree = 500,
importance = TRUE,
na.action = na.omit
)
data.tree$models$teamComp_forest
data.tree$temp.data$gameInfo.tree
data.tree$temp.data$gameInfo.tree %>% count(team_win)
data.tree$temp.data$gameInfo.tree %>% count(team_win) %>% mutate(n = n/sum(n))
data.tree$temp.data$gameInfo.tree %>% count(team_win) %>% mutate(n = n/sum(n)) %>% view()
data.tree$temp.data$gameInfo.tree %>%
count(team_win) %>%
mutate(n = n/sum(n))
install.packages("word2vec")
library(word2vec)
?word2vec
hero.cluster <- list(
models = list(),
plots = list(),
temp.data = list()
)
hero.cluster$temp.data$gameInfo <- gameInfo %>%
select(match, win, championName)
hero.cluster$temp.data$gameInfo %>% head
rm(hero.cluster)
championCluster <- list(
models = list(),
plots = list(),
temp.data = list()
)
championCluster$temp.data$gameInfo <- gameInfo %>%
select(match, win, championName) %>%
group_by(match, win) %>%
mutate(championNumber = row_number()) %>%
pivot_wider(
names_from = championNumber,
values_from = championName
) %>%
transmute(match = match, win = win, team = str_c(`1`,`2`,`3`,`4`,`5`, sep = " "))
championCluster$temp.data$gameInfo
championCluster$temp.data$gameInfo <- NULL
championCluster$temp.data$teams <- gameInfo %>%
select(match, win, championName) %>%
group_by(match, win) %>%
mutate(championNumber = row_number()) %>%
pivot_wider(
names_from = championNumber,
values_from = championName
) %>%
transmute(match = match, win = win, team = str_c(`1`,`2`,`3`,`4`,`5`, sep = " ")) %>%
ungroup() %>%
select(team)
championCluster$temp.data$teams
championCluster$models$nlpModel <- championCluster$temp.data$teams %>%
word2vec(x = ., type = "skip-gram", dim = 20, iter = 15)
championCluster$models$nlpModel <- word2vec(
x = championCluster$temp.data$teams$team,
type = "skip-gram",
dim = 20,
iter = 15
)
championCluster$models$nlpModel
championCluster$models$nlpModel %>%
summary()
install.packages("Rtsne")
library(Rtsne)
rpart.plot(data.tree$models$teamComp_forest)
importance(data.tree$models$teamComp_forest)
varImpPlot(data.tree$models$teamComp_forest)
varImpPlot(data.tree$models$teamComp_forest)
importance(data.tree$models$teamComp_forest)
varImpPlot(data.tree$models$teamComp_forest)
championCluster$models$nlpModel
?word2vec
# Embedding Matrix
championCluster$models$embeddingMatrix <- as.matrix(championCluster$models$nlpModel)
championCluster$models$embeddingMatrix
# Embedding Matrix
championCluster$models$embeddingMatrix <- as.matrix(championCluster$models$nlpModel)
?Rtsne
dim(championCluster$models$embeddingMatrix)
# Applying TSne
championCluster$models$Tsne <- Rtsne(championCluster$models$embeddingMatrix, pca = FALSE)
championCluster$plots$map <- championCluster$models$Tsne$Y %>%
as.data.frame() %>%
mutate(word = row.names(championCluster$models$embeddingMatrix)) %>%
ggplot(aes(x = V1, y = V2, label = word)) +
geom_text(size = 3)
championCluster$plots$map
championCluster$models$Tsne$Y
championCluster$temp.data$teams <- gameInfo %>%
select(match, win, championName) %>%
group_by(match, win) %>%
mutate(championNumber = row_number()) %>%
pivot_wider(
names_from = championNumber,
values_from = championName
) %>%
transmute(match = match, win = win, team = str_c(`1`,`2`,`3`,`4`,`5`, sep = ",")) %>%
ungroup() %>%
select(team)
championCluster$temp.data$teams
championCluster$models$nlpModel <- word2vec(
x = championCluster$temp.data$teams$team,
type = "skip-gram",
dim = 20,
iter = 15
)
# Embedding Matrix
championCluster$models$embeddingMatrix <- as.matrix(championCluster$models$nlpModel)
# Applying TSne
championCluster$models$Tsne <- Rtsne(championCluster$models$embeddingMatrix, pca = FALSE)
championCluster$plots$map <- championCluster$models$Tsne$Y %>%
as.data.frame() %>%
mutate(word = row.names(championCluster$models$embeddingMatrix)) %>%
ggplot(aes(x = V1, y = V2, label = word)) +
geom_text(size = 3)
championCluster$plots$map
championCluster$temp.data$teams <- gameInfo %>%
select(match, win, championName) %>%
group_by(match, win) %>%
mutate(championNumber = row_number()) %>%
pivot_wider(
names_from = championNumber,
values_from = championName
) %>%
transmute(match = match, win = win, team = str_c(`1`,`2`,`3`,`4`,`5`, sep = " ")) %>%
ungroup() %>%
select(team)
championCluster$temp.data$teams
set.seed(3)
championCluster$models$nlpModel <- word2vec(
x = championCluster$temp.data$teams$team,
type = "skip-gram",
dim = 20,
iter = 15
)
# Embedding Matrix
championCluster$models$embeddingMatrix <- as.matrix(championCluster$models$nlpModel)
# Applying TSne
championCluster$models$Tsne <- Rtsne(championCluster$models$embeddingMatrix, pca = FALSE)
championCluster$plots$map <- championCluster$models$Tsne$Y %>%
as.data.frame() %>%
mutate(word = row.names(championCluster$models$embeddingMatrix)) %>%
ggplot(aes(x = V1, y = V2, label = word)) +
geom_text(size = 3)
championCluster$plots$map
championCluster$plots$map
library(plotly)
championCluster$plots$map %>%
ggplotly()
championCluster$plots$map <- championCluster$plots$map %>%
ggplotly()
championCluster$plots$map
library(tidyverse)
library(data.table)
library(randomForest)
library(rpart.plot)
library(word2vec)
library(Rtsne)
library(plotly)
library(keras)
install.packages("rsplit")
install.packages("rsample")
library(rsample)
data.NN <- list()
data.NN$split <- initial_split(gameInfo, prop = 4/5)
data.NN$train <- training(data.NN$split)
data.NN$test <- testing(data.NN$split)
View(data.NN)
gameInfo
data.tree$temp.data$gameInfo.temp
championCluster$temp.data$teams
gameInfo
data.NN <- list()
data.NN$data.temp <- gameInfo %>%
select(match, championName, win)
data.NN$data.temp
championCluster$plots$map <- championCluster$models$Tsne$Y %>%
as.data.frame() %>%
mutate(champion = row.names(championCluster$models$embeddingMatrix)) %>%
ggplot(aes(x = V1, y = V2, label = word)) +
geom_point(size = 3)
championCluster$plots$map <- championCluster$plots$map %>%
ggplotly()
championCluster$plots$map
championCluster$plots$map <- championCluster$models$Tsne$Y %>%
as.data.frame() %>%
mutate(champion = row.names(championCluster$models$embeddingMatrix)) %>%
ggplot(aes(x = V1, y = V2, label = word)) +
geom_point()
championCluster$plots$map <- championCluster$plots$map %>%
ggplotly()
championCluster$plots$map <- championCluster$models$Tsne$Y %>%
as.data.frame() %>%
mutate(champion = row.names(championCluster$models$embeddingMatrix)) %>%
ggplot(aes(x = V1, y = V2, label = word)) +
geom_text(size = 3)
championCluster$plots$map <- championCluster$plots$map %>%
ggplotly()
championCluster$plots$map <- championCluster$models$Tsne$Y %>%
as.data.frame() %>%
mutate(champion = row.names(championCluster$models$embeddingMatrix)) %>%
ggplot(aes(x = V1, y = V2, label = champion)) +
geom_point()
championCluster$plots$map <- championCluster$plots$map %>%
ggplotly()
championCluster$plots$map
data.NN <- list()
data.NN$data.temp <- gameInfo %>%
distinct(match, win)
data.NN$data.temp
data.tree$temp.data$gameInfo.temp
championCluster$temp.data$teams
championCluster$temp.data$teams <- gameInfo %>%
select(match, win, championName) %>%
group_by(match, win) %>%
mutate(championNumber = row_number()) %>%
pivot_wider(
names_from = championNumber,
values_from = championName
) %>%
transmute(match = match, win = win, team = str_c(`1`,`2`,`3`,`4`,`5`, sep = " ")) %>%
ungroup()
championCluster$temp.data$teams
data.NN <- list()
data.NN$data.temp <- championCluster$temp.data$teams %>%
select(!match)
data.NN$data.temp
data.NN$split <- initial_split(data.NN$data.temp, prop = 4/5)
data.NN$train <- training(data.NN$split)
data.NN$test <- testing(data.NN$split)
library(tfruns)
library(tidyverse)
library(data.table)
library(randomForest)
library(rpart.plot)
library(word2vec)
library(Rtsne)
library(plotly)
library(keras)
library(tfruns)
library(rsample)
?layer_text_vectorization
nrow(champions.scraped)
source("~/.active-rstudio-document", echo=TRUE)
source("~/.active-rstudio-document", echo=TRUE)
source("~/.active-rstudio-document", echo=TRUE)
?fit
data.NN$train$win %>% as.numeric()
as.numeric(data.NN$train$win == "1")
as.numeric(data.NN$train$win == "2")
as.numeric(data.NN$train$win == 1)
as.numeric(data.NN$train$win == 2)
?keras_model
as.numeric(data.NN$train$win == 1)
as.numeric(data.NN$train$win == "1")
data.NN$train == 1
data.NN$train$win
as.numeric(data.NN$train$win == TRUE)
source("~/.active-rstudio-document", echo=TRUE)
source("~/.active-rstudio-document", echo=TRUE)
source("~/.active-rstudio-document", echo=TRUE)
source("~/.active-rstudio-document", echo=TRUE)
source("~/.active-rstudio-document", echo=TRUE)
source("~/.active-rstudio-document", echo=TRUE)
source("~/.active-rstudio-document", echo=TRUE)
source("~/.active-rstudio-document", echo=TRUE)
View(split)
get_vocabulary(text_vectorization())
get_vocabulary(text_vectorization
)
text_vectorization(matrix(data.NN$data.temp$team[1], ncol = 1))
source("~/.active-rstudio-document", echo=TRUE)
source("~/.active-rstudio-document", echo=TRUE)
results
source("~/.active-rstudio-document", echo=TRUE)
results
runs <- tuning_run(
"TeamCompNN.R",
flags = list(dropout = c(0.2, 0.3, 0.4, 0.5))
)
flag_numeric("dropout", 0.5)
runs <- tuning_run(
"TeamCompNN.R",
flags = list(dropout = c(0.2, 0.3, 0.4, 0.5))
)
runs <- tuning_run(
"TeamCompNN.R",
flags = list(dropout = c(0.2, 0.3, 0.4, 0.5))
)
runs <- tuning_run(
"TeamCompNN.R",
flags = list(dropout = c(0.2, 0.3, 0.4, 0.5))
)
runs <- tuning_run(
"TeamCompNN.R",
flags = list(dropout = c(0.2, 0.3, 0.4, 0.5))
)
runs
View(runs)
input
runs <- tuning_run(
"TeamCompNN.R",
flags = list(
dropout = c(0.2, 0.3, 0.4, 0.5),
unit = c(8, 16, 64)
)
)
View(runs)
runs
runs %>% as_tibble()
runs %>% as_tibble() %>%
arrange(metric_val_accuracy)
runs %>% as_tibble() %>%
arrange(desc(metric_val_accuracy))
runs %>% as_tibble() %>%
arrange(desc(metric_val_accuracy)) %>%
{.$model[[1]]} ->model
model
runs
runs %>%
dplyr::arrange.data.frame(desc(metric_val_accuracy))
runs %>%
dplyr::arrange(desc(metric_val_accuracy))
runs %>%
dplyr::arrange(desc(metric_val_accuracy)) %>%
{.$model} -> model
model
runs %>%
dplyr::arrange(desc(metric_val_accuracy))
view_run("runs/2021-12-20T22-31-29Z")
?tfruns
?tuning_run
dplyr::arrange(desc(metric_val_accuracy))
runs
runs %>%
arrange(desc(metric_val_accuracy))
view_run("runs/2021-12-20T22-31-29Z")
tfruns::training_run("TeamCompNN.R")
tfruns::training_run("TeamCompNN.R")
results
results
model$weights
model %>%
predict_classes("MonkeyKing Graves Ahri Jihn Nami")
model %>%
predict_classes("MonkeyKing Graves Ahri Jihn Nami")
?predict_classes
model %>%
predict_classes(c("MonkeyKing Graves Ahri Jihn Nami"))
data.NN$data.temp
model %>%
predict_classes("Darius Warwick Malzahar Xayah Malphite")
model %>%
predict_classes(test$team)
model%>%
predict("Camille Talon Veigar Xayah Lulu") %>%
`>`(0.5) %>%
k_cast("int32")
model %>% predict("Camille Talon Veigar Xayah Lulu") %>%  `>`(0.5) %>% k_cast("int32")
model %>% predict("Camille Talon Veigar Xayah Lulu")
model %>% predict("Sett Talon Veigar Xayah Lulu")
model %>% predict("Camille Talon Veigar Jihn Lulu")
model %>% predict("Camille Talon Veigar Jihn Lux")
