library(tidyverse)
library(jsonlite)
library(httr)
data.temp <- list()
matchData <- list()
data.temp$division <- c("I", "II", "III", "IV")
data.temp$pages <- 1:10
api <- "RGAPI-9da114a8-6c3d-496c-9add-61168ff22a92"
RIOTAPI_FUNCTIONS <- list()
GET_JSON <- function(INPUT){
output <- GET(INPUT) # Have to use httr::GET to properly parse this url
output$content %>%
rawToChar() %>%
fromJSON() %>%
return()
}
RIOTAPI_FUNCTIONS$GET_DIAMOND_ACCOUNTS <- function(division, page){
Sys.sleep(1.2)
url <- paste0("https://na1.api.riotgames.com/lol/league/v4/entries/RANKED_SOLO_5x5/DIAMOND/", division, "?page=", page, "&api_key=", api)
GET_JSON(url) %>%
return()
}
RIOTAPI_FUNCTIONS$GET_PUUID <- function(summonerId){
Sys.sleep(1.2)
url <- paste0("https://na1.api.riotgames.com/lol/summoner/v4/summoners/", summonerId,  "?api_key=", api)
GET_JSON(url) %>%
return()
}
RIOTAPI_FUNCTIONS$GET_HISTORY <- function(puuid){
Sys.sleep(1.2)
url <- paste0("https://americas.api.riotgames.com/lol/match/v5/matches/by-puuid/", puuid, "/ids?queue=420&start=0&count=20&api_key=", api)
GET_JSON(url) %>%
return()
}
RIOTAPI_FUNCTIONS$GET_MATCH <- function(matchid){
Sys.sleep(1.2)
url <- paste0("https://americas.api.riotgames.com/lol/match/v5/matches/", matchid, "?api_key=", api)
GET_JSON(url) %>%
return()
}
data.temp$tier_page <- expand_grid(division = data.temp$division, page = data.temp$pages)
data.temp$tier_page
# Doing this in steps because of the api query request limitations
# First get summonerIds
matchData$accounts.raw <- data.temp$tier_page %>%
mutate(
accounts = pmap(
.,
.f = RIOTAPI_FUNCTIONS$GET_DIAMOND_ACCOUNTS
)
)
# Just retaining the summonerIds
matchData$summonerIds <- matchData$accounts.raw %>%
mutate(
accounts = map(
accounts,
.f = function(accounts){
accounts %>%
select(summonerId) %>%
return()
}
)
) %>%
unnest(cols = accounts)
# Get PUUID's now, need this to get match history
matchData$accounts <- matchData$summonerIds %>%
mutate(
puuid = map(
summonerId,
.f = RIOTAPI_FUNCTIONS$GET_PUUID
),
puuid = map( # Probably separate this next time just in case maybe? It might work fine with the select function
puuid,
.f = function(puuid){
puuid %>%
as_tibble() %>%
select(puuid) %>%
return()
}
)
) %>%
unnest(puuid)
head(matchData$accounts)
matchData$match_history <- matchData$accounts %>%
mutate(
matches = map(
puuid,
.f = RIOTAPI_FUNCTIONS$GET_HISTORY
)
)
head(matchData$match_history)
View(matchData)
matchData$matches <- matchData$match_history %>%
mutate(
empty = map(
matches,
.f = is_empty
)
) %>%
unnest(cols = empty) %>%
filter(empty == FALSE) %>%
unnest(cols = matches) %>%
distinct(matches, .keep_all = T) %>%
select(division, match = matches)
head(matchData$matches)
api <- "RGAPI-99449289-877e-4d0c-af13-b52843c5afd5"
library(tidyverse)
library(jsonlite)
library(httr)
matchData$gameInfo.1 <- matchData$matches %>%
filter(row_number() <= nrow(matchData$matches)/2) %>%
mutate(
gameInfo = map(
match,
.f = RIOTAPI_FUNCTIONS$GET_MATCH
)
)
api <- "RGAPI-9f496152-d508-4560-b054-acb0a9d47e4a"
matchData$gameInfo.2 <- matchData$matches %>%
filter(row_number() > nrow(matchData$matches)/2) %>%
mutate(
gameInfo = map(
match,
.f = RIOTAPI_FUNCTIONS$GET_MATCH
)
)
