gameInfo <- read_csv("../data/teamNames.csv")
library(tidyverse)
gameInfo <- read_csv("../data/teamNames.csv")
gameInfo
gameInfo <- read_csv("../data/matchData.csv")
gameInfo
?read_csv
gameInfo <- read_csv("../data/matchData.csv") %>%
select(!X1)
gameInfo <- read_csv("../data/teamNamesSparse.csv")
gameInfo
gameInfo %>%
select(!1:3)
?prcomp
gameInfo %>%
select(!1:3) %>%
as.matrix() %>%
prcomp()
gameInfo %>%
select(!1:3) %>%
as.matrix() %>%
eigen()
?eigen
gameInfo %>%
select(!1:3) %>%
as.matrix() %>%
prcomp()
gameInfo %>%
select(!1:3) %>%
as.matrix()
gameInfo %>%
select(!1:3) %>%
as.matrix() %>%
view()
gameInfo %>%
select(!1:3) %>%
as.matrix() %>%
prcomp()
gameInfo %>%
select(!1:3) %>%
as.matrix() %>%
prcomp() %>%
summary()
gs()
gc()
gameInfo.pca <- gameInfo %>%
select(!1:3) %>%
as.matrix() %>%
prcomp()
gameInfo.pca
gameInfo.pca %>%
summary()
gameInfo.pca %>%
summary() %>%
tidy()
library(broom)
gameInfo.pca %>%
summary() %>%
tidy()
gameInfo.pca %>%
summary()
View(gameInfo.pca)
gameInfo.pca %>%
summary() %>%
typeof()
gameInfo.pca.summary <- gameInfo.pca %>%
summary()
gameInfo.pca.summary$importance
gameInfo.pca.summary$importance %>%
tidy()
gameInfo.pca.summary$importance %>%
tibble()
gameInfo.pca.summary$importance %>%
tibble()
gameInfo.pca.summary$importance %>%
view()
gameInfo.pca.summary$importance %>%
as_tibble()
gameInfo.pca.summary$importance %>%
as_tibble() %>%
transpose()
gameInfo.pca.summary$importance %>%
as_tibble()
gameInfo.pca.summary <- gameInfo.pca %>%
summary()
gameInfo.pca.summary
gameInfo.pca.summary$importance %>%
as_tibble() %>%
mutate(variable = c("sd", "prop_var", "cumulative_var"))
?pivot_longer
gameInfo.pca.summary$importance %>%
as_tibble() %>%
mutate(variable = c("sd", "prop_var", "cumulative_var")) %>%
pivot_longer(
names_to = "component",
values_to = "value"
)
gameInfo.pca.summary$importance %>%
as_tibble() %>%
mutate(variable = c("sd", "prop_var", "cumulative_var")) %>%
pivot_longer(
cols = .,
names_to = "component",
values_to = "value"
)
gameInfo.pca.summary$importance %>%
as_tibble() %>%
mutate(variable = c("sd", "prop_var", "cumulative_var")) %>%
select(ncol(.), !ncol(.))
gameInfo.pca.summary$importance %>%
as_tibble() %>%
mutate(variable = c("sd", "prop_var", "cumulative_var")) %>%
select(ncol(.), !ncol(.)) %>%
as_tibble(cbind(nms = names(.), t(.)))
as_tibble(cbind(nms = names(test), t(test)))
gameInfo.pca.summary$importance %>%
as_tibble() %>%
mutate(variable = c("sd", "prop_var", "cumulative_var")) %>%
select(ncol(.), !ncol(.)) -> test
as_tibble(cbind(nms = names(test), t(test)))
as_tibble(cbind(nms = names(temp), t(temp)))
temp <- gameInfo.pca.summary$importance %>%
as_tibble()
as_tibble(cbind(nms = names(temp), t(temp)))
as_tibble(cbind(nms = names(temp), t(temp))) %>%
transmute(
component = str_extract(nms, "PC(.{1,})"),
sd = V2,
var = V3,
cum_var = V4
)
as_tibble(cbind(nms = names(temp), t(temp))) %>%
transmute(
component = str_extract(nms, "^PC(.{1,})"),
sd = V2,
var = V3,
cum_var = V4
)
as_tibble(cbind(nms = names(temp), t(temp))) %>%
transmute(
component = str_remove("PC"),
sd = V2,
var = V3,
cum_var = V4
)
as_tibble(cbind(nms = names(temp), t(temp))) %>%
transmute(
component = str_remove(nms, "PC"),
sd = V2,
var = V3,
cum_var = V4
)
library(plotly)
as_tibble(cbind(nms = names(temp), t(temp))) %>%
transmute(
component = str_remove(nms, "PC"),
sd = V2,
var = V3,
cum_var = V4
) %>%
plot_ly(
x = ~component,
y = ~cum_var,
type = "scatter",
mode = "lines+markers"
)
as_tibble(cbind(nms = names(temp), t(temp))) %>%
transmute(
component = str_remove(nms, "PC"),
sd = V2,
var = V3,
cum_var = V4
) %>%
plot_ly(
x = ~component,
y = ~cum_var,
type = "scatter",
mode = "markers"
)
as_tibble(cbind(nms = names(temp), t(temp))) %>%
transmute(
component = str_remove(nms, "PC"),
component = as.integer(component),
sd = V2,
var = V3,
cum_var = V4
) %>%
plot_ly(
x = ~component,
y = ~cum_var,
type = "scatter",
mode = "markers"
)
gameInfo.svd <- gameInfo %>%
select(!1:3) %>%
as.matrix() %>%
svd()
gameInfo.svd %>% summary()
gameInfo.svd
?glm
gameInfo
?glm
gc()
library(glmnet)
install.packages("glmnet")
library(glmnet)
?glmnet
gameInfo
cv.logistic <- cv.glmnet(
x = gameInfo %>%
select(!1:3) %>%
as.matrix(),
y = gameInfo$blue_win,
family = "binomial",
alpha = 1
)
logistic.fit <- glmnet(
x = gameInfo %>%
select(!1:3) %>%
as.matrix(),
y = gameInfo$blue_win,
family = "binomial",
alpha = 1,
lambda = cv.logistic$lambda.min
)
coef(logistic.fit)
plot(cv.logistic)
cv.logistic$lambda.min
logistic.fit %>%
summary()
logistic.fit$beta
logistic.fit$beta %>%
as.tibble()
logistic.fit$beta
logistic.fit$beta %>%
as.data.frame()
logistic.fit$beta %>%
as.matrix() %>%
as.data.frame()
logistic.fit$beta %>%
as.matrix() %>%
as.tibble()
logistic.fit$beta %>%
as.matrix() %>%
as.data.frame()
logistic.fit$beta %>%
as.matrix() %>%
as.data.frame() %>%
rownames_to_column(var = "champion")
logistic.fit$beta %>%
as.matrix() %>%
as.data.frame() %>%
rownames_to_column(var = "champion") %>%
arrange(champion)
logistic.fit$beta %>%
as.matrix() %>%
as.data.frame() %>%
rownames_to_column(var = "champion") %>%
arrange(champion) %>%
filter(s0 != 0)
logistic.fit$beta %>%
as.matrix() %>%
as.data.frame() %>%
rownames_to_column(var = "champion") %>%
arrange(s0)
logistic.fit$beta %>%
as.matrix() %>%
as.data.frame() %>%
rownames_to_column(var = "champion") %>%
filter(s0 != 0)
logistic.fit$beta %>%
as.matrix() %>%
as.data.frame() %>%
rownames_to_column(var = "champion") %>%
filter(s0 != 0) %>%
arrange(s0)
logistic.fit$df
logistic.fit$dim
logistic.fit$a0
logistic.fit$dev.ratio
logistic.fit$npasses
logistic.fit$beta %>%
as.matrix() %>%
as.data.frame() %>%
rownames_to_column(var = "champion") %>%
filter(s0 != 0) %>%
arrange(s0)
library(tidyverse)
library(broom)
library(glmnet)
library(plotly)
gameInfo <- read_csv("../data/teamNamesSparse.csv")
library(tidyverse)
library(broom)
library(glmnet)
library(plotly)
# gameInfo <- read_csv("../data/teamNamesSparse.csv")
install.packages("mclust")
library(mclust)
rm(test)
gameInfo.svd %>%
head()
# gameInfo.svd
gameInfo.EM <- Mclust(
data = gameInfo %>%
select(!1:3)
)
summary(gameInfo.EM)
plot(gameInfo.EM, what = "BIC")
